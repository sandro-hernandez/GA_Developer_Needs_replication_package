AnswerId,QuestionId,AnswerCreationDate,AnswerScore,AnswerBody,AnswerAuthorId,AnswerAuthorName
"68245520","68244484","2021-07-04 14:06:30","2","<p>You may create multiple workflow files for each function and specify the <code>paths</code> option to trigger your workflow. If at least one <code>path</code> matches a pattern in the paths filter, the workflow runs.</p>
<p>I assume your directory structure is as follows;</p>
<pre><code>|_azure-functions
  |_ function1
  |_ function2
</code></pre>
<p>with the above sub-directories, you can define each workflow as follows.</p>
<pre><code># .github/workflows/function1-ci.yml

name: Publish Function1
on:
  push:
    branches: [ main ]
    paths:
      - &quot;function1/**&quot;
</code></pre>
<pre><code># .github/workflows/function2-ci.yml

name: Publish Function2
on:
  push:
    branches: [ main ]
    paths:
      - &quot;function2/**&quot;
</code></pre>
<p>Additionally, there is a <code>paths-ignore</code> option too available for excluding changes from locations defined. You can use a combination of this option aswell.</p>
","3289282",""
"69403634","69396004","2021-10-01 09:31:51","2","<p>My question was partially based on wrong assumptions about BuildX and its role in the example workflow. (I thought you must use BuildX to use BuildKit in the action and our Dockerfile used a few BuildKit features)</p>
<p>I found answer to my question partially in <a href=""https://stackoverflow.com/questions/64403659/docker-buildx-image-not-showing-in-docker-image-ls"">Docker BuildX image not showing in docker image ls</a> and a <a href=""https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/"" rel=""nofollow noreferrer"">blog post Multi-arch build and images, the simple way</a>.</p>
<p>By using <code>setup-buildx-action</code> step, BuildKit builds multi-platform images that does not get directly loaded into docker (since you need a single-platform image to be loaded). We currently don't need multi-platform builds and we prefer the speed of our CI. So removing <code>setup-buildx-action</code> from the workflow caused, that the single-platform image appears in <code>docker images</code> and it can be immediately used for running the tests (with no obvious time overhead for loading single-platform images to the docker).</p>
<p>I.e. commenting out this step helped:</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v1
</code></pre>
<p>Once our pipeline gets more complicated and lengthy, we may start building multi-platform images again, but for now, saving 6 minutes on the run makes more sense.</p>
<p>Note: Feel free to add your answers/comments. I believe there is a better solution than removing buildx setup and also I wonder if there is a smart solution for building multi-platform solutions and getting the image loaded to <code>docker images</code> fast.</p>
","2179215",""
"72753335","72740856","2022-06-25 11:05:20","1","<p>That's not true for the trigger <code>pull_request</code>. It is enough for this trigger to be on the branch associated with your pull request -- no need to put it in the base branch.</p>
<p><code>pull_request_target</code>, however, needs to be in the base branch to name an example. â€“</p>
","1080523",""
"74141877","73417515","2022-10-20 14:47:56","0","<p>One other alternative is to configure a bare repository on your server, and adding it as a second remote on your local repository.
Now every time you want to deploy code to your server, you push to this remote. You then create a git hook on your server that fires post-push, and automatically executes a script that restarts a service, for example.
Read more <a href=""https://daveceddia.com/deploy-git-repo-to-server/"" rel=""nofollow noreferrer"">here</a></p>
<p>For me, I am having a hard time choosing between these two alternatives because I have some unanswered questions :</p>
<ul>
<li><p>for github actions, how secure is the SSH key being ran from a github runner ? and given that my codebase is huge, isn't it a bit overkill to scp all my files after a hotfix commit where I changed only 1 or 2 files ?</p>
</li>
<li><p>for git bare repo: would the size of the git folder be a problem ? and how to secure my server so it would not serve the .git folder ?</p>
</li>
</ul>
","8410972",""
"77371664","73417515","2023-10-27 05:15:19","0","<p>Your approach of using scp can be secure, but there are some considerations to keep in mind:</p>
<ul>
<li><strong>SSH key handling</strong>: Ensure that you are storing your SSH private key and any other sensitive data as GitHub secrets and not
hard-coding them in your workflow file.</li>
<li><strong>Key Management</strong>: Use a dedicated SSH key pair specifically for this GitHub Action.</li>
<li><strong>Least Privilege Principle</strong>: The SSH account used for copying should have the minimum necessary permissions. It should only be able
to write to the required directories.</li>
<li><strong>Auditing &amp; Logging</strong>: Ensure that both GitHub Actions and your server have proper auditing and logging enabled.</li>
</ul>
<p>Your approach of using a self-hosted runner has security advantages over GitHub hosted runners as you would have control over the self-hosted runner. You can setup ingress filtering on the SSH port with ease with self-hosted runners. Also, you can use private server endpoint for SSH and potentially eliminate the internet exposure for your server.</p>
","21283302",""
"74537554","74478449","2022-11-22 18:37:00","0","<p>We had the same issue recently with our aws stack deployed with AWS CDK and GitHub Actions. In our case updating the CDK version and redeploying solved the problem.</p>
","11664046",""
"75412290","75386396","2023-02-10 14:11:18","0","<p>At the YAML level, single quotes around <code>${{ secrets... }}</code> should fix the syntax error.</p>
<p>But, according to the <a href=""https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability"" rel=""nofollow noreferrer"">Context availability</a>, the <code>secrets</code> context is not allowed under <code>stratey</code>. The allowed contexts are:</p>
<pre><code>jobs.&lt;job_id&gt;.strategy      github, needs, vars, inputs
</code></pre>
<p>You can make use of the <a href=""https://docs.github.com/en/actions/learn-github-actions/contexts#vars-context"" rel=""nofollow noreferrer""><code>vars</code> context</a> for your use case.</p>
<p>Apart from that, linting your workflow with <a href=""https://rhysd.github.io/actionlint/"" rel=""nofollow noreferrer"">https://rhysd.github.io/actionlint/</a> would be much faster to identify potential issues.</p>
<hr />
<p><strong>UPDATE</strong> (by <a href=""https://stackoverflow.com/users/4473386/dmytro-chasovskyi"">Dmytro Chasovskyi</a>)</p>
<p>Here is an example with the <code>vars</code> context:</p>
<p>With a variable <code>DOMAINS</code> having this config:</p>
<pre class=""lang-json prettyprint-override""><code>{
   &quot;v1&quot;: {
     &quot;url&quot;: &quot;http://localhost:80/api/v1&quot;
   },
   &quot;v2&quot;: {
     &quot;url&quot;: &quot;http://localhost:80/api/v2&quot;
   }
}
</code></pre>
<p>the workflow will be:</p>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
  build:
    strategy:
      matrix:
        domain: [['main', 'books-v1', '${{ vars.DOMAINS.v1.url }}'], ['old-main', 'books-v2', '${{ vars.DOMAINS.v2.url }}']]
</code></pre>
","7670262",""