AnswerId,QuestionId,AnswerCreationDate,AnswerScore,AnswerBody,AnswerAuthorId,AnswerAuthorName
"58004257","57503578","2019-09-19 05:30:33","17","<p>I made a GitHub Action that I think will help you with this use case.
<a href=""https://github.com/peter-evans/create-pull-request"" rel=""nofollow noreferrer"">https://github.com/peter-evans/create-pull-request</a></p>
<p><code>create-pull-request</code> action needs to be run in conjunction with other actions or steps that modify or add files to your repository. The changes will be automatically committed to a new branch and a pull request created.</p>
<p>Here is an example that sets most of the main inputs.</p>
<pre><code>on:
  repository_dispatch:
    types: [create-pull-request]
name: Create Pull Request
jobs:
  createPullRequest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create report file
        run: date +%s &gt; report.txt
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Add report file
          committer: Peter Evans &lt;peter-evans@users.noreply.github.com&gt;
          body: |
            New report
            - Contains *today's* date
            - Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          title: '[Example] Add report file'
          labels: report, automated pr
          assignees: peter-evans
          reviewers: peter-evans
          milestone: 1
          branch: example-patches
</code></pre>
<p>To make it bot-like you can trigger the workflow periodically.</p>
<pre><code>on:
 schedule:
   - cron: '*/5 * * * *'
</code></pre>
<p>Alternatively, you can set the workflow to trigger via webhook, as in the example above.</p>
<pre><code>on:
  repository_dispatch:
    types: [create-pull-request]
</code></pre>
<p>To trigger the workflow call the following. <code>[username]</code> is a GitHub username. <code>[token]</code> is a <code>repo</code> scoped token. <code>[repository]</code> is the name of the repository the workflow resides in.</p>
<pre><code>curl -XPOST -u &quot;[username]:[token]&quot; -H &quot;Accept: application/vnd.github.everest-preview+json&quot; -H &quot;Content-Type: application/json&quot; https://api.github.com/repos/[username]/[repository]/dispatches --data '{&quot;event_type&quot;: &quot;create-pull-request&quot;}'
</code></pre>
<p>For further examples check out the <a href=""https://github.com/peter-evans/create-pull-request/blob/main/docs/examples.md"" rel=""nofollow noreferrer"">documentation here</a>.</p>
","11934042",""
"57521953","57509118","2019-08-16 09:15:47","4","<p>As mentioned in the <a href=""https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobs"" rel=""nofollow noreferrer"">Workflow syntax docs</a>:</p>

<blockquote>
  <p>Each job runs in a fresh instance of the virtual environment specified by runs-on.</p>
</blockquote>

<p>From what I can see here, you're doing the checkout step in a completely separate job from others. Doing it that way it does not affect other jobs in any way. It should actually be defined <em>inside</em> those jobs where your npm CLI commands are executed.</p>

<p>Here's an example of how it would look like in one of your jobs:</p>

<pre><code>jobs:
  # (...) Other jobs
  # Install Dependencies
  install_dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
    - uses: actions/checkout@master
    - run: yarn dep:install-npm
    needs: checkout
  # (...) Other jobs
</code></pre>

<p>There are some general examples in <a href=""https://github.com/actions/starter-workflows/blob/master/ci/npm-publish.yml"" rel=""nofollow noreferrer"">GitHub starter workflow templates</a>.</p>
","7029969",""
"57830377","57808152","2019-09-07 03:14:16","0","<p>@Rezwan provided the link to the image I was looking for.</p>

<p>I'm still not able to run it due to the following issues:</p>

<p><a href=""https://github.com/cirruslabs/docker-images-flutter/issues/27"" rel=""nofollow noreferrer"">https://github.com/cirruslabs/docker-images-flutter/issues/27</a></p>

<p><a href=""https://stackoverflow.com/q/57830375/3231778"">GitHub Actions workflow error: Cannot create file, path = &#39;/github/home/.flutter&#39;</a></p>
","3231778",""
"57838959","57808152","2019-09-08 03:20:56","3","<p>I let my one running without Docker. </p>

<p>You could try to install flutter and run flutter pub get. I used in my example <a href=""https://github.com/marketplace/actions/flutter-action"" rel=""nofollow noreferrer"">subosito/flutter-action@v1</a></p>

<pre><code>name: CI

on:
  pull_request:
    branches:
      - development
      - master

jobs:
  test:
    name: Flutter Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.7.8+hotfix.4'
      - run: flutter doctor
      - run: flutter pub get
      - run: flutter test
</code></pre>
","3690032",""
"59022667","57808152","2019-11-24 21:36:27","16","<p>You don't need to use a flutter specific container, there is a <a href=""https://github.com/marketplace/actions/flutter-action"" rel=""nofollow noreferrer"">Flutter Action</a> available that runs on the default Windows, Linux and macOS containers.</p>
<p>This means that building your flutter app is as simple as using the action and then running the flutter build command. The following example runs an Android apk build:</p>
<pre><code>on: push
jobs: 
  build-and-test: 
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
    # Get flutter packages
    - run: flutter pub get
    # Build :D 
    - run: flutter build apk
</code></pre>
<p>I wrote a <a href=""https://admcpr.com//continuous-integration-for-flutter-with-github-actions/"" rel=""nofollow noreferrer"">blog post</a> about building and testing flutter using actions if you'd like to learn more.</p>
","2529475",""
"73714978","57808152","2022-09-14 10:01:39","0","<p>I leave here a link to the production project with the app in the stores.</p>
<p>Maybe it saves time for somebody, I would be glad to have it when I implement it.</p>
<ol>
<li>Uses secret keys for signing releases.</li>
<li>Create .apks for different flavors.</li>
<li>Add the build number to the files.</li>
<li>Create a GitHub release.</li>
</ol>
<p><a href=""https://github.com/AgoraDesk-LocalMonero/agoradesk-app-foss/blob/main/.github/workflows/build_from_tags_ci.yml"" rel=""nofollow noreferrer"">https://github.com/AgoraDesk-LocalMonero/agoradesk-app-foss/blob/main/.github/workflows/build_from_tags_ci.yml</a></p>
","7198006",""
"58636619","58630097","2019-10-31 03:40:17","11","<p>I think you can resolve it by associating <code>master</code> with <code>origin master</code> like this:</p>

<pre><code>git fetch origin master:master
git diff --name-only master
</code></pre>

<p>Be aware that events that trigger <code>on: pull_request</code> workflows are not associated with a branch, they are associated with a merge commit SHA. So <code>actions/checkout@v1</code> by default will checkout the merge commit specified by <code>GITHUB_SHA</code>, not the branch that is merging into the base. See the <a href=""https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows#pull-request-event-pull_request"" rel=""noreferrer"">documentation here</a>. </p>

<p>You can override this default behaviour and checkout the branch merging into the base like this:</p>

<pre><code>      - uses: actions/checkout@master
        with:
          ref: ${{ github.head_ref }}
</code></pre>

<p>I'm not sure if this will be necessary for your use case, but there might be unintended effects when running <code>diff</code> on the merge commit.</p>
","11934042",""
"58964728","58933795","2019-11-20 22:59:53","1","<p>I cannot comment to ask questions due to my reputation but I'll try to answer.</p>

<p>I don't know your workflow but if I understand well, you can use args keyword and also entrypoint like that : </p>

<pre><code>steps:
  - name: It does something 
    uses: circleci/android:api-28
    with:
      entrypoint: /entrypoint.sh
      args: |
         COPY entrypoint.sh /entrypoint.sh
         RUN sudo chmod +x entrypoint.sh
</code></pre>

<p>I really don't know if it will work like that, but maybe <a href=""https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepswithargs"" rel=""nofollow noreferrer"">this documentation can help you</a>.</p>
","7087644",""
"59095924","59060710","2019-11-28 20:43:20","0","<blockquote>
  <p>1) Which images are available for use in the build? Can I use one of my public Docker Hub images as a base image so that I can spare myself installing the linux dependencies and gems?</p>
</blockquote>

<p>Yes ! Feel free to use your image with the keyword <strong>uses in your first step</strong> like that :</p>

<pre><code>- uses: docker://{host}/{image}:{tag}
</code></pre>

<blockquote>
  <p>2) How can I configure MongoDB as a service? Is there an image available for that?</p>
</blockquote>

<p>You can do like that :</p>

<pre><code>services:
  mongodb:
    image: mongo:3.4.23
    ports:
      - 27017:27017
</code></pre>

<p>Also, there is <a href=""https://dev.to/s_abderemane/how-to-use-docker-services-in-github-actions-6ce"" rel=""nofollow noreferrer"">an article</a> about Docker services maybe it can helps you to better understand services in Github Actions.</p>
","7087644",""
"59310425","59302035","2019-12-12 18:04:50","15","<p>You can try a <a href=""https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"" rel=""noreferrer""><code>matrix</code></a> configuration with:</p>
<pre><code>name: test
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        token: [token1, token2, etc...]
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: &quot;load configuration&quot;
      run: echo &quot;configuration=$conf&quot; &gt;&gt; ./conf
      env:
        conf: ${{ matrix.token }}
    - name: &quot;integration tests&quot;
      run: &quot;mvn -B integration-test&quot;
</code></pre>
<p>This will create <code>N</code> jobs where <code>N</code> is the number of tokens in the list and each job with <code>conf: ${{ matrix.token }}</code> will resolve to a token in the list for the current job.</p>
<hr />
<p>I think it may also be possible to store your tokens as secrets and setup the matrix like:</p>
<pre><code>strategy:
  matrix:
    token: [&quot;${{secrets.token1}}&quot;, &quot;${{secrets.token2}}&quot;, etc...]
</code></pre>
<p>However, I haven't tested this.</p>
<h2>EDIT</h2>
<p>I found a trick to make the secrets tokens work:</p>
<ol>
<li>Create your secrets and call them <code>token1</code>, <code>token2</code>, etc</li>
<li>Create your matrix configuration using the tokens i.e. the names of the secrets:</li>
</ol>
<pre><code>strategy:
  matrix:
    token: [token1, token2]
</code></pre>
<ol start=""3"">
<li>In your job's env, create the following environment variable:</li>
</ol>
<pre><code>env:
  token: ${{secrets[matrix.token]}}
</code></pre>
<ol start=""4"">
<li>Now the actual value for the token for each build matrix is stored inside the environment variable <code>${{env.token}}</code> (when operating within an expression context) or <code>$token</code> (in bash).</li>
</ol>
<p>The environment variable will still remain a secret, so you don't loose anything.</p>
","2089675",""
"60303169","60303168","2020-02-19 14:59:18","15","<p>No, don't put the token in the .yaml file.  For use with GitHub Actions, you add the token to the Secrets section of your GitHub repository, then leave the .yaml code above as it is.</p>

<p>Add the secret at the URL (modify with your names): <a href=""https://github.com/USERNAME/REPONAME/settings/secrets"" rel=""noreferrer"">https://github.com/USERNAME/REPONAME/settings/secrets</a> and call it CODECOV_TOKEN.  Then this .yaml code will find it.</p>

<p>(You get the repo's codecov token from <a href=""https://codecov.io/gh/USERNAME/REPONAME"" rel=""noreferrer"">https://codecov.io/gh/USERNAME/REPONAME</a>)</p>
","4470365",""
"61268185","61268184","2020-04-17 09:26:31","1","<p>I've created a simple CLI that can help you achieve that - <a href=""https://github.com/unfor19/githubsecrets"" rel=""nofollow noreferrer"">https://github.com/unfor19/githubsecrets</a> </p>

<p>This CLI is based on the official <a href=""https://developer.github.com/v3/actions/secrets/#secrets"" rel=""nofollow noreferrer"">GitHub Actions Secrets API</a></p>

<p>Install with pip</p>

<pre class=""lang-sh prettyprint-override""><code>$ pip install githubsecrets
...
$ ghs --help
...
</code></pre>

<p>Or use with Docker; you must supply all arguments, prompts are not available in Docker mode</p>

<p>macOS and Linux</p>

<pre class=""lang-sh prettyprint-override""><code>$ docker run -v $HOME:/root unfor19/githubsecrets --help
Usage: ghs [OPTIONS] COMMAND [ARGS]...
</code></pre>

<p>Windows</p>

<pre class=""lang-sh prettyprint-override""><code>$ docker run --rm -v c:/Temp:/root unfor19/githubsecrets --help
Usage: ghs [OPTIONS] COMMAND [ARGS]...
</code></pre>

<p><img src=""https://githubsecrets.s3-eu-west-1.amazonaws.com/githubsecrets-demo.gif"" alt=""Usage-Demo""></p>
","5285732",""
"61268481","61268184","2020-04-17 09:43:29","1","<p>Another one, in ruby:</p>

<pre><code>$ gem install secret_hub
</code></pre>

<p>also using the official Github API, and supports bulk operations.</p>

<p><a href=""https://github.com/dannyben/secret_hub"" rel=""nofollow noreferrer"">https://github.com/dannyben/secret_hub</a></p>

<p>Full disclosure: I wrote it, following <a href=""https://github.community/t5/GitHub-Actions/Secrets-on-Team-and-Organization-level/td-p/29745"" rel=""nofollow noreferrer"">this discussion</a> about the missing feature in GitHub to have organization-level secrets.</p>
","413924",""
"61827072","61823476","2020-05-15 19:39:03","1","<p>A quick Google search led me to this action: <a href=""https://github.com/marketplace/actions/run-java-checkstyle"" rel=""nofollow noreferrer"">https://github.com/marketplace/actions/run-java-checkstyle</a></p>

<p>Haven't tried it myself, but worth a shot to use as a base if it doesn't work out.</p>
","2382650",""
"64736773","61863729","2020-11-08 09:58:07","0","<p>I'm sure its too late for you but may be suitable for others with same aim to upload test results</p>
<p>Option 1: upload only html report without all other JS stuff</p>
<p>Option 2: upload entire directory</p>
<pre><code>name: PR_unit_tests

on:
  pull_request:
    branches:
      - 'main'

jobs:
  Unit-test:
    name: Run unit tests on PR in main
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with: {java-version: 1.8}
      - name: Run unit tests
        run: ./gradlew test

      - name: Upload html test report
        uses: actions/upload-artifact@v2
        with:
          name: index.html
          path: app/build/reports/tests/testDebugUnitTest/index.html

      - name: Upload test report directory
        uses: actions/upload-artifact@v2
        with:
          name: testDebugStuff
          path: app/build/reports/tests/testDebugUnitTest/
         
</code></pre>
","6588221",""
"61985092","61979870","2020-05-24 11:12:01","0","<p>Generally, it is not possible to write out YAML exactly the way it was written when you loaded it, see <a href=""https://stackoverflow.com/q/60891174/347964"">this question</a>.</p>

<p>You can follow the advice in the answer there: Load to node graph instead of native objects. It looks like this in PyYAML:</p>

<pre class=""lang-py prettyprint-override""><code>import yaml
import io

input = """"""
xx: [x1, x2]
yy: [y1, y2, y3]
""""""

loader = yaml.Loader(input)
node = loader.get_single_node()

stream = io.StringIO()
dumper = yaml.Dumper(stream)
dumper.open()
dumper.serialize(node)
dumper.close()
print(stream.getvalue())
</code></pre>

<p>Output will be:</p>

<pre class=""lang-yaml prettyprint-override""><code>xx: [x1, x2]
yy: [y1, y2, y3]
</code></pre>

<p>This works because a <em>node</em> still remembers its original style (while the native data doesn't). It is still possible to alter the YAML structure, but you now need to create data as nodes instead of just manipulating the loaded Python data.</p>

<p>If you want to create your data in Python and dump in your preferred format, the easiest way to do that would probably be:</p>

<ul>
<li>create the data</li>
<li>dump it to a YAML string</li>
<li>load that string as node graph</li>
<li>walk the node graph and alter the <code>style</code> attribute of the nodes to your liking</li>
<li>represent the node graph as YAML again</li>
</ul>
","347964",""
"62364531","61979870","2020-06-13 19:14:37","5","<p>As pointed out by @Tsyvarev my desired behavior can be triggered by</p>
<pre><code>yaml.dump({&quot;A&quot;:[1,2,3],&quot;B&quot;:[4,5,6]}, default_flow_style=None)
</code></pre>
<p>The <a href=""https://pyyaml.org/wiki/PyYAMLDocumentation"" rel=""noreferrer"">official documentation</a> doesn't seem to define this <code>None</code> behavior though:</p>
<blockquote>
<p>By default, PyYAML chooses the style of a collection depending on whether it has nested collections. If a collection has nested collections, it will be assigned the block style. Otherwise it will have the flow style.</p>
<p>If you want collections to be always serialized in the block style, set the parameter <code>default_flow_style of dump()</code> to <code>False</code>.</p>
</blockquote>
","534298",""
"62105229","62087265","2020-05-30 16:12:41","7","<h1>Real final edit</h1>
<p>A year later, I finally got around to making the tutorial: <a href=""https://github.com/Andrew-Chen-Wang/cookiecutter-django-ec2-github"" rel=""nofollow noreferrer"">https://github.com/Andrew-Chen-Wang/cookiecutter-django-ec2-github</a>.</p>
<p>I found a <a href=""https://medium.com/cloudwithmore/blue-green-deployment-for-autoscaling-groups-with-codepipeline-codebuild-and-codedeploy-part-3-7-9d1d1d1824e7"" rel=""nofollow noreferrer"">Medium tutorial</a> that also deserves some light if anyone wants to use Code Pipeline (there's a couple of differences; I store my files on GitHub while the Medium tutorial is on S3. I create a custom VPC that the other author doesn't).</p>
<hr />
<h1>Earlier final edit</h1>
<p>AWS has finally made a neat tutorial for CodeDeploy w/ GitHub repository: <a href=""https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-github-prerequisites.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-github-prerequisites.html</a> take a look there and enjoy :)</p>
<p>Like the ECS tutorial, we're using Parameter Store to store our secrets. The way AWS previous wanted us to grab secrets was via a script in a bash script: <a href=""https://aws.amazon.com/blogs/mt/use-parameter-store-to-securely-access-secrets-and-config-data-in-aws-codedeploy/"" rel=""nofollow noreferrer"">https://aws.amazon.com/blogs/mt/use-parameter-store-to-securely-access-secrets-and-config-data-in-aws-codedeploy/</a></p>
<p>For example:</p>
<pre><code>password=$(aws ssm get-parameters --region us-east-1 --names MySecureSQLPassword --with-decryption --query Parameters[0].Value)
password=`echo $password | sed -e 's/^&quot;//' -e 's/&quot;$//'`
mysqladmin -u root password $password
</code></pre>
<hr />
<p>New edit (24 December 2020): I think I've nailed it. Below I pointed to <a href=""https://donate-anything.org"" rel=""nofollow noreferrer"">Donate Anything</a> for AWS ECS. I've moved to a self deploying setting. If you take a look at bin/scripts, I'm taking advantage of supervisord and gunicorn (for Python web development). But in context of EC2, you can simply point your AppSpec.yml to those scripts! Hope that helps everyone!</p>
<p>Before I start:</p>
<p>This is not a full answer. Not a complete walkthrough, but a lot of hints and some code that will help you with setting up certain AWS stuff like ALB and your files in your repo for this to work. This answer is more like several clues jumbled together from my sprint run trying to make ECS work last night.</p>
<p>I also don't have enough points to neither comment nor chat soo... here's the best thing I can offer.</p>
<p>Quick links (you should probably just skip these two points, though):</p>
<ol>
<li>Check this out: <a href=""https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-ec2-configure.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-ec2-configure.html</a></li>
<li>I don't have enough points to comment or chat... This won't be a full answer, as well, though, as I'm trying to first finish an ECS deploy from GH before moving on to EC2 from GH. Anyhow...</li>
<li>One last edit: this will sound like a marketing ploy but a correct implementation with GitHub actions and workflow_dispatch is located at <a href=""https://github.com/Donate-Anything/Donate-Anything"" rel=""nofollow noreferrer"">Donate Anything's GitHub repository</a>. You'll find the same ECS work located below in there. Do note that I changed my GitHub action to use Docker Hub since it was free (and to me cheaper if you're going to use ECS since AWS ECR is expensive).</li>
</ol>
<p>Edit: The ECS deployment works now. Will start working on the EC2 deployment soon.</p>
<p>Edit 2: I added Donate Anything repo. Additionally, I'm not sure if direct EC2 deployment, at least for me, is viable since install scripts would kinda be weird. However, I still haven't found the time to get to EC2. Again, if anyone is willing to share their time, please do so and contribute!</p>
<p>I do want to warn everyone that SECURITY GROUPS are very important. That clogged me for a long time, so make sure you get them right. <a href=""https://github.com/Andrew-Chen-Wang/cookiecutter-django-ecs-github"" rel=""nofollow noreferrer"">In the ECS tutorial</a>, I teach you how I do it.</p>
<hr />
<p>Full non-full answer:</p>
<p>I'm working on this issue right now in <a href=""https://github.com/Andrew-Chen-Wang/cookiecutter-django-ec2-gh-action"" rel=""nofollow noreferrer"">this repo</a> and another for ECS <a href=""https://github.com/Andrew-Chen-Wang/cookiecutter-django-ecs-github"" rel=""nofollow noreferrer"">here</a> using GitHub actions. I haven't started too far on the EC2 one, but the basic rundown for testing is this:</p>
<p><strong>CRUCIAL</strong></p>
<ul>
<li><strong>You need to try and deploy from the AWS CLI first. This is because AWS Actions does not have a dedicated action for deploying to EC2 yet.</strong></li>
<li>Write down each of these statements. We're going to need them later for the GitHub action.</li>
</ul>
<p>Some hints when testing this AWS setup:</p>
<ul>
<li>Before using CodeDeploy, you need an EC2 instance, an Application Load Balancer (you'll find it under Elastic Load Balancer), and a target group (which you create DURING the ALB setup). Go to target groups, right click on the group, and register your instance.</li>
<li>To deploy from CodeDeploy, create a new application. Create a new deployment group. I think, for your setup, you should do the in-place deployment type rather than the Blue/Green deployment type.</li>
<li>Finally, testing on the CLI, you should run the code you see here: <a href=""https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-wordpress-deploy-application.html#tutorials-wordpress-deploy-application-create-deployment-cli"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-wordpress-deploy-application.html#tutorials-wordpress-deploy-application-create-deployment-cli</a>
<ul>
<li>Do note, you may want to start from here (using S3 as a location to store your latest code. You can delete it afterwards anyways, as I believe DELETE requests don't incur charges): <a href=""https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-wordpress-upload-application.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-wordpress-upload-application.html</a> I personally don't know if that GitHub OAuth integration works. I tried once before (very amateur though, i.e. no clue what I was doing before) and nothing happened, soo... I'd just stick with that tutorial.</li>
</ul>
</li>
</ul>
<p>How your test rundown will look like:</p>
<ul>
<li>For me, for my ECS repo, I just went a full 10 hours straight trying to configure everything properly step by step like the GitHub action. For you, you should do the same. Imagine you're the code: figure out where you need to start from.</li>
<li>Aha! I should probably figure out CodeDeploy first. Let's right an appspec.yaml file first! The appspec file is how CodeDeploy will work on the hooks for everything. Unfortunately, I'm current going through that problem <a href=""https://stackoverflow.com/questions/62104760/appspec-yaml-for-aws-ecs-using-github-actions"">here</a> but that's because the EC2 and ECS syntax for AppSpec files are different. Luckily, EC2 doesn't have any special areas. Just get your files and hooks right. An example from my test:</li>
</ul>
<pre><code>version: 0.0
os: linux

files:
  - source: /
    destination: /code

hooks:
  BeforeInstall:
    - location: aws_scripts/install_dependencies
      timeout: 300
      runas: root
  ApplicationStop:
    - location: aws_scripts/start_server
      runas: root
</code></pre>
<p>The GitHub action:</p>
<p>What you'll need at minimum:</p>
<pre><code>jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # TODO Change your AWS region here!
        aws-region: us-east-2
</code></pre>
<p>The checking out of code is necessary to... well... get the code.</p>
<p>For the configuration of AWS credentials, you'll want to add <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> to your GitHub secrets with a proper IAM credential. For this, I believe the only IAM role needed is for full CodeDeploy stuff.</p>
<p>Deploying the code:</p>
<p>This is when that test code that you should've tried before reaching this step is for. Now that your workflow is setup, let's paste the code from the CLI into your action.</p>
<pre><code>
    - name: Deploying with CodeDeploy
      id: a-task
      env:
        an-environment-variable: anything you want
      run: |
        echo &quot;Your CLI code should be placed here&quot;
</code></pre>
<p>Sorry if this was confusing, not what you're looking for, or wanted a complete tutorial. I, too, haven't actually gotten this to work, but it's also been awhile since I last tried, and the last time I tried, I didn't even know what an EC2 instance was... I just did a standalone EC2 instance and used rsync to transfer my files. Hopefully what I've written was several clues that can guide you very easily to a solution.</p>
<p>If you got it to work, please share it on here: <a href=""https://github.com/Andrew-Chen-Wang/cookiecutter-django-ec2-gh-action"" rel=""nofollow noreferrer"">https://github.com/Andrew-Chen-Wang/cookiecutter-django-ec2-gh-action</a> so that no one else has to suffer the pain of AWS deployment...</p>
","12875823",""
"66661512","62087265","2021-03-16 18:45:14","36","<blockquote>
<p>Is there a way to deploy code to AWS EC2 without using Elastic Beanstalk?</p>
</blockquote>
<p>I found a simple way to deploy to EC2 instance (or to any server that accepts <code>rsync</code> commands over <code>ssh</code>) using <a href=""https://github.com/features/actions"" rel=""noreferrer"">GitHub Actions</a>.</p>
<p>I have a simple file in the repo's <em>.github/workflows</em> folder, which <strong>GitHub Actions</strong> runs to deploy to my EC2 instance whenever a push is made to my GitHub repo.</p>
<p>No muss, no fuss, no special incantations or Byzantine AWS configuration details.</p>
<p>File <em>.github/workflows/pushtoec2.yml</em>:</p>
<pre class=""lang-yaml prettyprint-override""><code>name: Push-to-EC2

on: push

jobs:
  deploy:
    name: Push to EC2 Instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v1

      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: &quot;./&quot;
          REMOTE_HOST: &quot;ec2-34-213-48-149.us-west-2.compute.amazonaws.com&quot;
          REMOTE_USER: &quot;ec2-user&quot;
          TARGET: &quot;/home/ec2-user/SampleExpressApp&quot;

</code></pre>
<p>Details of the <a href=""https://github.com/marketplace/actions/ssh-deploy"" rel=""noreferrer"">ssh deploy</a> GitHub Action, used above.</p>
","3113485",""
"66684511","62087265","2021-03-18 03:50:51","6","<p>First, you need to go through this tutorial on AWS to set up your EC2 server, as well as configure the Application and Deployment Group in CodeDeploy: <a href=""https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-github.html"" rel=""nofollow noreferrer"">Tutorial: Use CodeDeploy to deploy an application from GitHub</a></p>
<p>Then, you can use the following workflow in GitHub Actions to deploy your code on push. You essentially use the AWS CLI to create a new deployment. Store the AWS credentials for the CLI in GitHub Secrets.</p>
<p>Here is an example for deploying a Node app:</p>
<pre class=""lang-yaml prettyprint-override""><code>name: Deploy to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy AWS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
        app-name: ['your-codedeploy-application']
        deployment-group: ['your-codedeploy-deploy-group']
        repo: ['username/repository-name']
        
    steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install dependencies
        run: npm install
      
      - name: Build app
        run: npm run build

      - name: Install AWS CLI 
        run: |
          curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
          
      - name: Deploy to AWS
        run: |
          aws deploy create-deployment \
          --application-name ${{ matrix.app-name }} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{ matrix.deployment-group }} \
          --description &quot;GitHub Deployment for the ${{ matrix.app-name }}-${{ github.sha }}&quot; \
          --github-location repository=${{ matrix.repo }},commitId=${{ github.sha }}
</code></pre>
","6758964",""
"62167902","62167773","2020-06-03 07:58:34","6","<p>This is the page where you can find all information about how Github actions are billed. <a href=""https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions"" rel=""noreferrer"">https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions</a></p>

<blockquote>
  <p>GitHub charges usage to the account that owns the repository where the workflow is run</p>
</blockquote>

<p>I hope that answers your question</p>
","1927444",""
"62370921","62370850","2020-06-14 09:52:04","-1","<p>You can try to remove the <code>sudo</code> command.</p>
","7972321",""
"74045821","62370850","2022-10-12 17:25:04","-1","<p>The following worked for me by editing the <code>visudo</code> file</p>
<blockquote>
<p>do use this with caution as you are making sudo passwordless</p>
</blockquote>
<p>Editing visudo</p>
<pre class=""lang-bash prettyprint-override""><code>╰─ sudo EDITOR=vi visudo             
</code></pre>
<p>Commenting the <code>%admin</code> line and adding the following line</p>
<pre class=""lang-bash prettyprint-override""><code>╰─ sudo cat /etc/sudoers | grep admin
# %admin                ALL = (ALL) ALL
%admin ALL=(ALL) NOPASSWD: ALL
</code></pre>
<p>In case you get locked out of sudo, the following will help.</p>
<p><a href=""https://apple.stackexchange.com/questions/317425/fixing-etc-sudoers-file"">Locked out of sudo ?</a></p>
","5761011",""
"63648621","62908594","2020-08-29 15:22:07","3","<p>Try the --name option</p>
<pre><code>options: &gt;-
  --health-cmd pg_isready
  --health-interval 10s
  --health-timeout 5s
  --health-retries 5
  --name postgres 
</code></pre>
<p><a href=""https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idservices"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idservices</a></p>
<p>jobs.&lt;job_id&gt;.services.options: Additional Docker container resource options. For a list of options, see &quot;docker create options.&quot;</p>
<p>Another solution I've seen is using last created container</p>
<pre><code>docker exec -it $(docker ps --latest --quiet) bash
</code></pre>
","449683",""
"63426579","63426356","2020-08-15 13:31:10","3","<p>GitHub actions uses C# <a href=""https://github.com/actions/runner"" rel=""nofollow noreferrer"">runner</a>. If you want to you can host it on your infrastructure (<a href=""https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#about-self-hosted-runners"" rel=""nofollow noreferrer"">self-hosted runners</a>).</p>
","7642831",""
"63817068","63803136","2020-09-09 17:56:36","62","<p>To get event data, you can use a GitHub action to print the event to the log.</p>
<pre><code># change this to the event type you want to get the data for
on:
  pull_request:
    types: [opened, closed, reopened]

jobs:
  printJob:    
    name: Print event
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo &quot;$GITHUB_CONTEXT&quot;
</code></pre>
<p>Alternatively, you can find example event data in the documentation:
<a href=""https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#webhook-payload-example-30"" rel=""noreferrer"">https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#webhook-payload-example-30</a></p>
","3241243",""
"69397197","64078671","2021-09-30 18:24:04","0","<p>Unfortunately, my solution was not at all tidy. I had to path into the gem installation directory and directly reference the gem executable. Thankfully, the relative path doesn't change, so I could just hardcode it into the test script. Maybe there's a more elegant solution, but once I got it working, I just dropped it.</p>
<p>And sorry if you're trying to reproduce this, but it was over a year ago and I left the company, so I don't have access to what the path was.</p>
","630517",""
"71230969","64078671","2022-02-23 03:13:45","0","<p>Jenkins -&gt; Manage Jenkins -&gt; Configure System -&gt; Global properties -&gt; Environment variables -&gt; Name: LC_ALL, Value: en_US.UTF-8</p>
","7718603",""
"73059178","64078671","2022-07-20 23:36:26","1","<ol>
<li>I was facing the same issue while setting up <code>fastlane</code> to run my Xcode tests.</li>
<li>Finally, solved the issue by adding PATH in <code>Jenkinsfile</code> as below.</li>
<li>Note that <code>SampleProject-TestCase-Executions</code> is Sample app on my Desktop.</li>
<li>Please find <a href=""https://github.com/BudhabhooshanPatil/Jenkin-demo-app"" rel=""nofollow noreferrer"">GitHub Demo App</a> for more info.</li>
</ol>
<pre><code>node {
    stage &quot;Run Fast file&quot;    
    sh '''
    cd /Users/bhooshanpatil/Desktop/SampleProject-TestCase-Executions
    export PATH=&quot;$PATH:/usr/local/bin:/usr/local/bin:/usr/local/sbin$:&quot;
    fastlane scan
    '''
}
</code></pre>
","10279508",""
"64173273","64169578","2020-10-02 14:27:46","2","<p>The error you are getting is because you aren't listening for incoming HTTP requests in your code or you're listening for incoming requests on the wrong port.</p>
<p>As you can see documented in the <a href=""https://cloud.google.com/run/docs/reference/container-contract#port"" rel=""nofollow noreferrer"">Cloud Run container runtime</a>, your container must listen for incoming HTTP requests on the port that is defined by Cloud Run and provided in the <code>$PORT</code> environment variable.</p>
<p>If this fails, the health check will fail to, and it would switch to an error state and the traffic will not be routed to the correct PORT.</p>
<p>I would post an example for Node.js and as I can see you do not have specified anything related to the port:</p>
<pre><code>const port = process.env.PORT || 8080;
app.listen(port, () =&gt; {
  console.log('Hello world listening on port', port);
});
</code></pre>
","12391391",""
"64727984","64727916","2020-11-07 13:07:06","5","<p>According to the <a href=""http://maven.apache.org/ref/3.6.3/maven-embedder/cli.html"" rel=""noreferrer"">Apache Maven CLI Options Reference</a>:</p>
<blockquote>
<p><code>-B</code>,<code>--batch-mode</code>   Run in non-interactive (batch) mode (disables output color)</p>
</blockquote>
","2988",""
"64777665","64745031","2020-11-10 22:24:56","1","<p>You can build standalone apps with expo on GH Actions. It's still turtle-cli build, but run on macos-latest runner;</p>
<p>You have to remember that your exported sources should be uploaded to some public server previously for further OTA updates.</p>
<p>Here you can find a simple workflow, how to do this with GH Actions with example on GH repository: <a href=""https://www.daily-coding.net/posts/building-standalone-expo-apps-with-github-actions"" rel=""nofollow noreferrer"">https://www.daily-coding.net/posts/building-standalone-expo-apps-with-github-actions</a>. In README you can also find an explanation, which credentials and secrets are needed.</p>
","5582738",""
"64799580","64793785","2020-11-12 07:28:05","0","<p>While GitHub Actions themselves have rate limits (from <a href=""https://github.com/hmarr/auto-approve-action/issues/6"" rel=""nofollow noreferrer"">this issue</a>, 20 workflow executions per minute), this is about, as <a href=""https://stackoverflow.com/users/8810271/allan-chain"">Allan Chain</a> points out in <a href=""https://stackoverflow.com/questions/64793785/do-the-github-api-rate-limits-apply-to-github-actions/64799580#comment114571841_64799580"">the comments</a>) about GitHub REST API calls.</p>
<p>And the official page on <a href=""http://Rate%20limit"" rel=""nofollow noreferrer"">REST API Rate limit</a> is not clear on that rate, when execute from a GitHub Action worlflow.</p>
<p>But it does point out the call:</p>
<pre><code>curl -H &quot;Accept: application/vnd.github.v3+json&quot; \
  https://api.github.com/rate_limit
</code></pre>
<p>So you can add that call (which does not count against your REST API rate limit) before and after your other REST API calls, and you will see how said rate is impacted.</p>
","6309",""
"64867540","64859065","2020-11-17 00:09:09","8","<p>It's because you're running the commands as the root user. Either create a new user using <code>sudo newuser {username}</code> or run the command <code>export {AGENT_ALLOW_RUNASROOT=&quot;1&quot;}</code> i recommend option 1 but both work just fine.</p>
","13157630",""
"65744334","64930068","2021-01-15 22:25:13","1","<p>There is a new Travis feature (in beta) that allows you to share files from one job with subsequent jobs in a build: <a href=""https://docs.travis-ci.com/user/using-workspaces/"" rel=""nofollow noreferrer"">workspaces</a></p>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
  include:
    - stage: warm_cache
      script:
        - echo &quot;foo&quot; &gt; foo.txt
      workspaces:
        create:
          name: ws1
          paths:
            - foo.txt
    - stage: use_cache
      workspaces:
        use: ws1
      script:
        - cat foo.txt || true
</code></pre>
<p>Also, SBT 1.4 allows you to push build artefacts to a Maven server and fetch then again later: <a href=""https://www.scala-sbt.org/1.x/docs/Remote-Caching.html"" rel=""nofollow noreferrer"">https://www.scala-sbt.org/1.x/docs/Remote-Caching.html</a></p>
","4432837",""
"65355741","65205928","2020-12-18 10:51:56","1","<p>I've solved my issues and this is an example github workflow for the github actions:</p>
<pre><code>name: Multiple Environments Example

on: [push, pull_request]

jobs:
  e2e-test-on-ubuntu-with-local-chrome:
    runs-on: ubuntu-latest
    #runs-on: macos-latest
    #runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: npm install
      - name: Test
        run: npm run clear-test -- &quot;wdio-configs/wdio.conf.chrome.chromedriver.headless.js --cucumberOpts.tagExpression=@myTests&quot;
        env:
          ENV_PATH: environment/QS
      - name: Upload Test Reports
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: tests/reports/
      - name: Upload Logs
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: log/
</code></pre>
","4062803",""
"72918267","65345432","2022-07-09 01:12:48","1","<p>Today I was able to do this with the following YAML (truncated):</p>
<pre class=""lang-yaml prettyprint-override""><code>...
with:
  targets: |
    FolderA/SubfolderA
    FolderB/SubfolderB
</code></pre>
<p>The actual GitHub Action passes this as an argument like the following:</p>
<pre class=""lang-yaml prettyprint-override""><code>runs:
  using: docker
  image: Dockerfile
  args:
    - &quot;${{ inputs.targets }}&quot;
</code></pre>
<p>What this does is simply sends the parameters as a string with the newline characters embedded, which can then be iterated over similar to an array in a POSIX-compliant manner via the following shell code:</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/sh -l

targets=&quot;${1}&quot;

for target in $targets
do
  echo &quot;Proof that this code works: $target&quot;
done
</code></pre>
<p>Which should be capable of accomplishing your desired task, if I understand the question correctly. You can always run something like <code>sh ./script.sh $target</code> in the loop if your use case requires it.</p>
","6456163",""
"65472861","65353108","2020-12-28 03:59:24","0","<p>Yes, this technically possible. GitHub Actions has the <code>on.schedule</code> <a href=""https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule"" rel=""nofollow noreferrer"">event</a> which allows you to essentially set up a cron schedule for execution of your workflow. Your cron schedule for running the workflow every 5 hours would be something like <code>0 0/5 * * *</code> (see <a href=""https://crontab.guru/#0_0/5_*_*_*"" rel=""nofollow noreferrer"">here</a>).</p>
<p>If you just want to open the webpage for 3 minutes, your workflow run step could use the <code>&amp;&amp;</code> chaining the URL-opening command (<code>xdg-open www.example.com</code> can be used to open a URL) with a <code>sleep 360</code>. I leave the actual composition of the workflow file as an exercise to the reader 🙂.</p>
","6310633",""
"65857032","65855054","2021-01-23 08:05:18","9","<p>In order to run something in more than one working directory, I believe you have two options:</p>
<p><strong>Option 1: Matrix</strong></p>
<p>Use GitHub Action's <a href=""https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"" rel=""noreferrer"">jobs.&lt;job_id&gt;.strategy.matrix</a> option. This will create multiple jobs, each with its own matrix (directory) value.</p>
<p>Here is a sample workflow:</p>
<pre><code>name: Test
on:
  push: { branches: master }

jobs:
  test:
    name: Matrix test
    runs-on: ubuntu-latest
    strategy:
      matrix: { dir: ['some-dir', 'other-dir'] }

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Do something with the matrix value
      working-directory: ${{ matrix.dir }}
      run: pwd
</code></pre>
<p>Running this will create two jobs:</p>
<p><a href=""https://i.sstatic.net/z5cXK.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/z5cXK.png"" alt=""enter image description here"" /></a></p>
<p><strong>Option 2: Custom Shell Script</strong></p>
<p>If the matrix option is not suitable for your needs, a simple shell script that loops through and tests all your nested applications (directories) might be appropriate. In this case, you ignore the <code>working-direcoty</code> directive in the workflow YAML, and let the script <code>cd</code> to each of them.</p>
<p>For example:</p>
<pre><code>#!/usr/bin/env bash

dirs=( some-dir other-dir )

for dir in &quot;${dirs[@]}&quot;; do
  pushd &quot;$dir&quot;
  pwd    # Do something more significant here
  popd
done
</code></pre>
","413924",""
"70453429","65893608","2021-12-22 18:12:06","18","<p>I just tested a <a href=""https://github.com/GuillaumeFalourd/poc-github-actions/blob/main/.github/workflows/workflow-tester19.yml"" rel=""noreferrer"">simple workflow here</a> (same as below) to use the virtual env.</p>
<p>It doesn't seem you need the <code>sudo apt install python3-env</code> command when using the <code>actions/checkout</code> and the <code>setup-python</code> actions to create the virtual env using the <code>python3.8 -m venv env</code> command.</p>
<pre class=""lang-yaml prettyprint-override""><code>on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Run Python commands
        run: |
          pip install --upgrade pip
          python3.8 -m venv env
          source env/bin/activate
          echo &quot;VIRTUAL ENV:&quot; $VIRTUAL_ENV
</code></pre>
<p>Returned me <code>VIRTUAL ENV: /home/runner/work/poc-github-actions/poc-github-actions/env</code> on the <a href=""https://github.com/GuillaumeFalourd/poc-github-actions/runs/4610138792?check_suite_focus=true"" rel=""noreferrer"">workflow run logs</a>.</p>
","8496462",""
"66093697","66088277","2021-02-07 22:19:02","2","<p>Thanks for sharing this.  I have precisely the same problems.</p>
<p>I added the following in my <code>Dockerfile</code></p>
<pre><code>RUN sed -i 's/\tif \[\[ -r $MAKEPKG_CONF \]\]; then/\tif \[\[ -f $MAKEPKG_CONF \]\]; then/' /usr/share/makepkg/util/config.sh
</code></pre>
<p>which replaces the check for read permission (<code>-r</code>) for the check whether the file exists and is a regular file (<code>-f</code>).</p>
<p>now my github action gets over this particular location, but fails with the next check:</p>
<pre><code>==&gt; ERROR: You do not have write permission for the directory $BUILDDIR (/tmp/aurutils).
    Aborting...
</code></pre>
<p>This is not a solution and does not answer what's the underlying issue, but I hope it helps anyways.</p>
","2165903",""
"66184907","66088277","2021-02-13 12:04:31","1","<p>This issue is caused by using glibc &gt;= 2.33 on the container and an outdated version of the Docker engine on the host.</p>
<p>You can fix it by patching glibc in your container:</p>
<pre class=""lang-sh prettyprint-override""><code>patched_glibc=glibc-linux4-2.33-4-x86_64.pkg.tar.zst
curl -LO https://repo.archlinuxcn.org/x86_64/$patched_glibc
bsdtar -C / -xvf $patched_glibc
</code></pre>
<p>Thanks to <a href=""https://github.com/lxqt/lxqt-panel/pull/1562/files"" rel=""nofollow noreferrer"">lxqt-panel</a> for the workaround.</p>
","2599002",""
"66358721","66358482","2021-02-24 20:56:23","1","<p>When you pass a image to a job, it will execute the <code>steps</code> defined in your job inside this container. Your container image only provides the environment in which your steps will be executed. You lose control of the entrypoint and arguments.</p>
<p>If you only want to run your container as a single step you could do something like this instead:</p>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - uses: docker://myimage:latest
</code></pre>
<p>or if you want to overwrite it:</p>
<pre class=""lang-yaml prettyprint-override""><code>    steps:
      - uses: docker://myimage:latest
        with:
          entrypoint: /run.sh
          args: --help
</code></pre>
","3719845",""
"66485882","66358482","2021-03-05 02:26:57","1","<p>I've settled along the lines below. Not ideal/DRY, as the <code>run.sh</code> entrypoint script has to be duplicated from the Docker container and kept up to date. Also, the <a href=""https://github.com/actions/upload-artifact"" rel=""nofollow noreferrer"">upload-artifact</a> GitHub Actions does not preserve executable bits, so have to zip everything in a tar file.</p>
<pre><code>jobs:
  build:
    container:
      image: XX/compiler:${{ matrix.DOCKER_TAG }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./.github/scripts/run.sh ./.github/scripts/build.sh
      - uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: 'build-*.tar.bz2'
          retention-days: 7
    strategy:
      fail-fast: false
      matrix:
        DOCKER_TAG: [gcc, nvhpc, intel]
        include:
          - DOCKER_TAG: gcc
            FC: gfortran
          - DOCKER_TAG: nvhpc
            FC: nvfortran
          - DOCKER_TAG: intel
            FC: ifort
</code></pre>
","661775",""
"66880199","66877085","2021-03-31 00:49:29","1","<p>thanks to @GuiFalourd and @riQQ , I was able to put together proof-of-concept set of repositories</p>
<ul>
<li><a href=""https://github.com/smallstepman/github-actions-submodule-test-parent"" rel=""nofollow noreferrer"">https://github.com/smallstepman/github-actions-submodule-test-parent</a></li>
<li><a href=""https://github.com/smallstepman/github-actions-submodule-test-child"" rel=""nofollow noreferrer"">https://github.com/smallstepman/github-actions-submodule-test-child</a></li>
</ul>
<p>Both repo share same <a href=""https://github.com/settings/tokens"" rel=""nofollow noreferrer"">GitHub Personal Access Token</a>. To fill the blanks from the blog.marcnuri.com guide, here is minimal set of permissions required to make this work (given both repositories are public, otherwise you need <code>repo</code> permission:
<a href=""https://i.sstatic.net/moHrt.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/moHrt.png"" alt=""enter image description here"" /></a></p>
","7432829",""
"66970965","66970875","2021-04-06 14:48:47","11","<p><a href=""https://docs.github.com/en/actions/using-github-hosted-runners/using-larger-runners#networking-for-larger-runners"" rel=""nofollow noreferrer"">Fixed IP addresses are now in beta for hosted Runners</a>. You can reserve a set of IP addresses and as long as these runners use the IP address at least monthly, they stay the same.</p>
<p>See the announcement here:</p>
<ul>
<li><a href=""https://github.blog/changelog/2022-09-01-github-actions-larger-runners-are-now-in-public-beta/"" rel=""nofollow noreferrer"">GitHub Actions Larger runners – Are now in public beta</a></li>
</ul>
<p>Alternatively, with a self-hosted runner on a VM you can control the IP address.</p>
<p>See also:</p>
<ul>
<li><a href=""https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#about-self-hosted-runners"" rel=""nofollow noreferrer"">About self-hosted runners</a>.</li>
</ul>
<p>Alternatively, your GitHub action workflow may be able to adjust the firewall settings as part of the run.</p>
<p>Or you could use something like SQL Server LocalDB or SQLLite to connect to the database locally on the runner. Or spin up a temporary DB in a cloud environment, open it up to the runner and throw it away afterwards.</p>
<p>Or you could use a VPN client to connect to actions runner to your environment. You can install anything you want on the runner.</p>
","736079",""
"66976500","66970875","2021-04-06 21:10:46","2","<p>If your database happens to be Redis or PostgreSQL, GitHub Actions includes a built-in feature called <a href=""https://docs.github.com/en/actions/guides/about-service-containers"" rel=""nofollow noreferrer"">Service Containers</a> to spin up an ephemeral database in CI for testing purposes.</p>
<p>These databases are short-lived: after your job that uses it completes, the service container hosting the database is destroyed.  You can either run the database in a container or directly on the virtual machine if desired.</p>
<p>For more info, see <a href=""https://docs.github.com/en/actions/guides/creating-postgresql-service-containers"" rel=""nofollow noreferrer"">Creating PostgreSQL service containers</a> in the GitHub Actions docs.</p>
<p>If you happen to be using another database, you can do some more manual legwork to install and run it yourself.</p>
","149428",""
"72494602","66970875","2022-06-03 19:56:45","10","<p>You can dynamically retrieve the GitHub Actions runner's IP address during your workflow using the <a href=""https://github.com/haythem/public-ip"" rel=""noreferrer"">public-ip action</a> and update your RDS instance's security group ingress rules before and after your unit test steps.</p>
<p>This will allow you to use GitHub's hosted runners with your workflow instead of hosting your own.</p>
<p><strong>Note</strong>: You will need to also <a href=""https://github.com/aws-actions/configure-aws-credentials"" rel=""noreferrer"">set AWS credentials</a> on your runner with permissions to update the associated security group. Also, you need to make sure the RDS instance is in a public subnet with an Internet Gateway attached and security group attached to it.</p>
<p>Your workflow should look something like this:</p>
<pre><code>deploy:
    name: deploy
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: &lt;your-rds-subnet-sg-id&gt;
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: &lt;your-ci-aws-access-key&gt;
          aws-secret-access-key: &lt;your-ci-aws-secret-key&gt;
          aws-region: &lt;your-rds-aws-region&gt;
      - name: get runner ip addresses
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: connect to your rds instance and run tests
        run: |
          ...run tests...
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
</code></pre>
<p>Ideally though you would run your integration tests in an EC2 within the same VPC as your RDS instance to avoid publicly exposing your RDS instance.</p>
","12488391",""
"73614361","66970875","2022-09-05 20:23:56","5","<p>This is in beta (September 1, 2022) but it is possible to assign static IP address to runners:</p>
<blockquote>
<p>Fixed IP ranges to provide access to runners via allow list services</p>
<p>Setup a fixed IP range for your machines by simply ticking a check box, this provides an IP range that can be allow listed in internal systems and in GitHub’s allow list to keep using Actions while making your GitHub environment more secure.
<a href=""https://i.sstatic.net/JgX5J.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/JgX5J.png"" alt=""Blockquote"" /></a></p>
</blockquote>
<p>More details <a href=""https://github.blog/changelog/2022-09-01-github-actions-larger-runners-are-now-in-public-beta/"" rel=""noreferrer"">here</a></p>
","2347999",""
"67150451","67107607","2021-04-18 15:46:22","18","<p>You can use <a href=""https://github.com/marketplace/actions/repository-dispatch"" rel=""noreferrer"">repository_dispatch action</a> to send an event that contains the data you need. Then it will trigger another workflow that has <code>on: repository_dispatch</code> and a specific event name. Check the documentation of the action for more information.</p>
<p>You can pass the data you want inside <code>client-payload</code>. For bigger files I suppose artifacts can be used.</p>
<p>For example, you have your first workflow:</p>
<pre><code>
name: Test

on:
  - push
jobs:
  preflight-job:
    name: First Step
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PAT }}
          event-type: my-event
          client-payload: '{""ref"": ""${{ github.ref }}"", ""sha"": ""${{ github.sha }}"", ""test"": ""test message""}'
</pre></code>
<p>And then create another workflow file that will be triggered by this event:</p>
<pre><code>
name: Repository Dispatch
on:
  repository_dispatch:
    types: [my-event]
jobs:
  myEvent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
          
      - run: echo ${{ github.event.client_payload.sha }}
      - run: echo ${{ github.event.client_payload.test }}
</pre></code>
","7376154",""
"78903010","67107607","2024-08-22 18:29:52","0","<p>You may want to create a <a href=""https://docs.github.com/en/actions/sharing-automations/reusing-workflows#creating-a-reusable-workflow"" rel=""nofollow noreferrer"">reusable workflow</a> in this case.</p>
<p>This way, your workflow can receive inputs and secrets from other workflow.</p>
","15292387",""
"67371879","67369480","2021-05-03 15:47:14","0","<p>Script using checkout@V1 which works</p>
<pre><code>name: Auto Merge prod-&gt;master
on:
  push:
    branches: [ prod ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Merge prod-&gt;master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/&lt;github_user_name&gt;/&lt;repo_name&gt;
        git config user.name &quot;test&quot;
        git config user.email &quot;test@test.com&quot;
        git fetch origin master
        git checkout -b master origin/master
        git merge origin/prod --ff-only
        git push origin master
</code></pre>
","5992555",""
"67376248","67369480","2021-05-03 21:50:19","4","<p>Although I have never used these, I suspect that <a href=""https://github.com/marketplace/actions/checkout"" rel=""nofollow noreferrer"">this</a> is the culprit:</p>
<blockquote>
<p><strong>Only a single commit is fetched by default, for the ref/SHA that triggered the workflow. Set fetch-depth: 0 to fetch all history for all branches and tags.</strong> Refer here to learn which commit $GITHUB_SHA points to for different events.</p>
</blockquote>
<p>(boldface mine).  With the single commit, Git cannot tell whether the merge would be a fast-forward; with the single branch, Git does not have the necessary branch names.  The extra fetches you run will fix <em>some</em> of these problems, but not enough of them.  Setting the fetch depth, as recommended right up front here, would thus fix the problem.</p>
","1256452",""
"67884515","67800532","2021-06-08 08:57:56","1","<p>looks like this was due to an older version of kotlin-serialization dependency in kotlin-datetime updating to kotlin-datetime 0.2.1 fixed it</p>
","668195",""
"68918609","68005219","2021-08-25 07:30:05","3","<p>You cannot use the 3-legged variant of OAuth2.0 (aka &quot;web-application flow&quot;) in a headless environment like Github Actions.</p>
<p>If you want to use OAuth (I list other possibilities below), then you need to utilize what gitlab calls the &quot;device-flow&quot;. See <a href=""https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow"" rel=""nofollow noreferrer"">github documentation</a>.</p>
<p>In this flow, there is no redirect to a given URL, so the app does not need a browser window. Instead it displays a code to the user. The user must the enter that code on a fixed URL (<a href=""https://github.com/login/device"" rel=""nofollow noreferrer"">https://github.com/login/device</a>). As soon as this is done, the app can request the authentication token. (So the app must keep polling until the user has entered the code).</p>
<p>Unfortunately, <code>httr</code> does not have nice wrapper functions for this variant, so you have to do the calls yourself. It can work like this:</p>
<pre><code>library(httr)



app_id &lt;- &quot;*redacted*&quot;


r &lt;- POST(&quot;https://github.com/login/device/code&quot;, 
          body = list(
            client_id = app_id,
            scope = &quot;user repo delete_repo&quot; #Scope must be given! https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps
))


device_code &lt;- content(r)$device_code

print(paste0(&quot;Enter the code  &quot;, content(r)$user_code, &quot;  at &quot;, content(r)$verification_uri))


## NOTE: In reality this request has to run in a loop, until the user has entered the code und the request succeeds.
##       For the demo we can execute it manually after the code has been entered.
r &lt;- POST(&quot;https://github.com/login/oauth/access_token&quot;, 
          body = list(
            client_id = app_id,
            device_code = device_code,
            grant_type = &quot;urn:ietf:params:oauth:grant-type:device_code&quot;
          ))

token &lt;- content(r)$access_token

## create and delete a private testrepository to check if everything worked
r &lt;- 
  POST(&quot;https://api.github.com/user/repos&quot;,
       add_headers(Authorization = paste(&quot;token&quot;, token)),
       body = list(name = &quot;testrepo&quot;,
                 private = TRUE,
                 auto_init = FALSE), 
       encode = &quot;json&quot;)


r &lt;- DELETE(paste0(&quot;https://api.github.com/repos/&quot;, content(r)$full_name), 
       add_headers(Authorization = paste(&quot;token&quot;, token)))
</code></pre>
<p>I have seen that there is <code>httr2</code>, and that it offers convenience functions for this flow. I have however never used it and do not know if it already works reliable. See <a href=""https://httr2.r-lib.org/reference/req_oauth_device.html"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Since this flow still requires user interaction, you may be better of with one of the following variants (I do not know if they fit your use case.):</p>
<ol>
<li><p><strong>Basic Auth:</strong>
You can define what github calls a &quot;personal access token&quot; beforehand. With this token you can authenticate without further interaction. Creation is described <a href=""https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"" rel=""nofollow noreferrer"">here</a>. In R you can use it most easily together with <code>httr::authenticate</code>.</p>
</li>
<li><p><strong>GITHUB_TOKEN:</strong>
Github automatically creates special secrets specifically Github Actions. These can be used to execute actions in the containing repository. For more info see <a href=""https://docs.github.com/en/actions/reference/authentication-in-a-workflow"" rel=""nofollow noreferrer"">here</a>.</p>
</li>
</ol>
","6664578",""
"68245520","68244484","2021-07-04 14:06:30","2","<p>You may create multiple workflow files for each function and specify the <code>paths</code> option to trigger your workflow. If at least one <code>path</code> matches a pattern in the paths filter, the workflow runs.</p>
<p>I assume your directory structure is as follows;</p>
<pre><code>|_azure-functions
  |_ function1
  |_ function2
</code></pre>
<p>with the above sub-directories, you can define each workflow as follows.</p>
<pre><code># .github/workflows/function1-ci.yml

name: Publish Function1
on:
  push:
    branches: [ main ]
    paths:
      - &quot;function1/**&quot;
</code></pre>
<pre><code># .github/workflows/function2-ci.yml

name: Publish Function2
on:
  push:
    branches: [ main ]
    paths:
      - &quot;function2/**&quot;
</code></pre>
<p>Additionally, there is a <code>paths-ignore</code> option too available for excluding changes from locations defined. You can use a combination of this option aswell.</p>
","3289282",""
"68313303","68303502","2021-07-09 08:06:23","1","<p>I actually found the problem
I was running the workflow locally using <a href=""https://github.com/nektos/act"" rel=""nofollow noreferrer"">https://github.com/nektos/act</a> and that appears to be the problem.
When I did test it under Github, the outcome and every step context is working as intended.</p>
<p>Thank you.</p>
","14103794",""
"68413598","68410854","2021-07-16 18:14:54","1","<p>Your problem is that the output contains multiple lines and only the first line is assigned to the variable. As seen on a <a href=""https://github.community/t/set-output-truncates-multiline-strings/16852"" rel=""nofollow noreferrer"">post</a> on the GitHub Support Community, you can escape the newline characters to have a single line which gets expanded automatically when used. Another thing to consider is that you should leave one line of space in the <code>.yml</code> in order to start a new line in the GitHub comment later on.</p>
<p><em>Your snippet should work like this:</em></p>
<pre class=""lang-none prettyprint-override""><code>- name: Diff revision
  id: diff_rev
  shell: bash
  working-directory: cobrax
  run: |
    delta=$(python3 codesizes.py diff build/zephyr/zephyr.elf)
    delta=&quot;${delta//'%'/'%25'}&quot;
    delta=&quot;${delta//$'\n'/'%0A'}&quot;
    delta=&quot;${delta//$'\r'/'%0D'}&quot;
    echo &quot;::set-output name=delta_code::$delta&quot;

- name: Auto Comment
  uses: bubkoo/auto-comment@v1
  with:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    pullRequestOpened: &gt;
      👋 @{{ author }}
      
      Thank you for raising your pull request.
      
      This is the code delta:
      
      ```
      
      ${{ steps.diff_rev.outputs.delta_code }}
      
      ```
      
      Please make sure you have followed our contributing guidelines. We will review it as soon as possible.
</code></pre>
<hr />
<p>A sample with <code>$(git log)</code>:</p>
<p><a href=""https://i.sstatic.net/B2ZlO.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/B2ZlO.png"" alt=""screenshot"" /></a></p>
<p>Full <code>auto-comment.yml</code>:</p>
<pre class=""lang-none prettyprint-override""><code>name: Auto Comment

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Diff revision
        id: diff_rev
        shell: bash
        run: |
          delta=$(git log)
          delta=&quot;${delta//'%'/'%25'}&quot;
          delta=&quot;${delta//$'\n'/'%0A'}&quot;
          delta=&quot;${delta//$'\r'/'%0D'}&quot;
          echo &quot;::set-output name=delta_code::$delta&quot;

      - name: Auto Comment
        uses: bubkoo/auto-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          pullRequestOpened: &gt;
            👋 @{{ author }}
            
            Thank you for raising your pull request.
            
            This is the code delta:
            
            ```
            
            ${{ steps.diff_rev.outputs.delta_code }}
            
            ```
            
            Please make sure you have followed our contributing guidelines. We will review it as soon as possible.
</code></pre>
","5024726",""
"76931465","68634487","2023-08-18 17:29:34","0","<p>Instead of below this line</p>
<pre><code>run: echo MOCK_USERNAME=&quot;$MOCK_USERNAME&quot; &gt; ./local.properties
</code></pre>
<p>Use below line</p>
<pre><code>run: echo 'MOCK_USERNAME=${{ secrets.USER }}' &gt; ./local.properties
</code></pre>
<p>Apply this pattern for others secrets  too.</p>
","1292557",""
"68694219","68692017","2021-08-07 16:29:51","8","<p>You can add this <a href=""https://github.com/webfactory/ssh-agent"" rel=""noreferrer"">action</a> after your checkout step and GitHub can access your private repo dependancy.</p>
<p>Note:- Make sure to add a server's private key as a secret, public key to GitHub SSH keys and Please replace your private repo URL from https+auth_token to SSH.
<code>ssh://git@github.com/your_group/your_project.git</code></p>
","16414425",""
"76191835","68692017","2023-05-07 01:16:24","7","<p>An easiest way to solve this problem is using the git <code>url.insteadOf</code> feature.</p>
<p>First of all, create a <code>.cargo/config.toml</code> file in your project root and add this (this force cargo to use git cli instead of libgit2):</p>
<pre><code># .cargo/config.toml
[net]
git-fetch-with-cli = true
</code></pre>
<p>Now, assuming that you have created a personal access token and added it to the (for example) <code>GIT_CREDENTIALS</code> repository environment variable:</p>
<pre><code># Cargo.toml
[dependencies]
b = { git = &quot;https://github.com/me/b.git&quot; }
</code></pre>
<p>You can do this inside your CI before any cargo command:</p>
<pre><code># my_action.yaml
git config --global url.&quot;https://${{ secrets.GIT_CREDENTIALS }}@github.com&quot;.insteadOf https://github.com
</code></pre>
<p><em>OR:</em></p>
<p>Alternatively, commonly is better for the developer to use ssh instead of https to fetch git dependencies. In this case, you can do:</p>
<pre><code># Cargo.toml
[dependencies]
b = { git = &quot;ssh://git@github.com/me/b.git&quot; }
</code></pre>
<p>In CI will be:</p>
<pre><code># my_action.yaml
git config --global url.&quot;https://${{ secrets.GIT_CREDENTIALS }}@github.com&quot;.insteadOf ssh://git@github.com
</code></pre>
<p>This will override the url adding the token and allowing you to fetch the dependencies using https. <strong>Reminder</strong>: don't forget the <code>git-fetch-with-cli = true</code> configuration.</p>
","9607657",""
"68759616","68759500","2021-08-12 14:47:19","0","<p>Please change task version to <code>v2</code>?</p>
<pre><code>      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
</code></pre>
","2347999",""
"68868105","68812228","2021-08-20 21:12:21","0","<p>Figured it out.</p>
<p>The component was calling &quot;DottedNoteBook&quot; but the file name is &quot;DottedNotebook.vue&quot;. (Different case for the letter &quot;B&quot;.)</p>
<p>I'm not sure why that case issue never came up before or preventing compiling outside of the GitHub Actions, but that was the issue. Thanks, @Tarkan for making me look closer at that.</p>
","523530",""
"68913679","68909767","2021-08-24 20:23:30","1","<blockquote>
<p>Added debug logs... if i'm reading this correctly it seems that my output variable token is not a string, it's an object <code>{access_token: *** }</code>? But even so, why would it come up as <code>&quot;&quot;</code> (empty string in the authorization header)? Should it not have added an object at least?</p>
</blockquote>
<p>I believe this is an expected behaviour as Github Actions runner probably can't check the output value, and ensure the secret isn't exposed through the workflow afterwards.</p>
<p>A workaround to your issue could be to save the output (<em>API_RESPONSE</em>) as a secret on the first job, and then access it as any other secret on the second job.</p>
<p><a href=""https://github.com/marketplace/actions/gh-secrets"" rel=""nofollow noreferrer"">This GH secrets action</a> could help you do it (it would even update the secret if it is already set).</p>
<p><em>Note: There may be other actions available providing a similar result.</em></p>
","8496462",""
"71004670","69126323","2022-02-06 06:19:09","2","<p>I have used tags, and I can tag a commit (in any branch) to be used for the action. Below is a part of my workflow file (yml):</p>
<pre><code>name: Azure Static Web Apps CI/CD

on:
  push:
    tags:
      - Publish*
</code></pre>
<p>So, any commit tag starts with 'Publish' will be used for the action (e.g. Publish1).
You can see more details about using tags in: <a href=""https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions</a></p>
","4554271",""
"73741774","69126323","2022-09-16 08:08:18","3","<p>You can mention multiple branch as given in documentation.</p>
<pre><code>on:
  push:
    branches:
      - main
      - 'releases/**'
</code></pre>
<p><a href=""https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions</a></p>
","4764448",""
"76993117","69255724","2023-08-28 13:11:13","1","<p>You should tell docker run to <a href=""https://docs.docker.com/engine/reference/commandline/run/#publish"" rel=""nofollow noreferrer"">expose</a> the port. Also, why do you fork the shell with <code>&amp;</code>? You can specify the <a href=""https://docs.docker.com/engine/reference/commandline/run/#options"" rel=""nofollow noreferrer""><code>--detach</code> option</a> instead.</p>
<pre><code>docker run -p 127.0.0.1:8080:8080 -d dashboard:${{ github.run_id }}-test
</code></pre>
<p>To further improve your CI, I would recommend to use Docker Compose instead, use a <a href=""https://docs.docker.com/compose/compose-file/05-services/#healthcheck"" rel=""nofollow noreferrer"">health check</a> and the <a href=""https://docs.docker.com/engine/reference/commandline/compose_up/"" rel=""nofollow noreferrer""><code>--wait</code> option for <code>docker compose up</code></a>.  You can also add <a href=""https://docs.docker.com/compose/compose-file/build/"" rel=""nofollow noreferrer"">build instructions</a> to the compose file and <a href=""https://docs.docker.com/compose/compose-file/05-services/#ports"" rel=""nofollow noreferrer"">port listening</a> configuration.</p>
","1816774",""
"69320045","69314615","2021-09-24 19:09:41","1","<p>Instead of using sockets, there is also a way to connect to outer docker, from docker in container, over TCP.</p>
<p>Linux example:</p>
<p>Run <code>ifconfig</code>, it will print the docker's network interface that is created when you install docker on a host node. Its usually named <code>docker0</code>, note down the IP address of this interface.</p>
<p>Now, modify the <code>/etc/docker/daemon.json</code> and add this<code>tcp://IP:2375</code> to the <code>hosts</code> section. Restart docker service.</p>
<p>Run containers with extra option: <code>--add-host=host.docker.internal:host-gateway</code></p>
<p>Inside any such container, the address <code>tcp://host.docker.internal:2375</code> now points to the outside docker engine.</p>
","1531054",""
"69387235","69314615","2021-09-30 06:32:50","0","<p>Try adding your username to the docker group as suggested <a href=""https://stackoverflow.com/questions/48957195/how-to-fix-docker-got-permission-denied-issue"">here</a>.<br />
Additionally, you should check your kernel <a href=""https://docs.docker.com/engine/install/linux-postinstall/#kernel-compatibility"" rel=""nofollow noreferrer"">compatibility</a>.</p>
","14663497",""
"77432466","69314615","2023-11-06 15:56:00","0","<p>just found this issue that I solved recently.
You need to specify group ID that docker group have on your host, for mounted socket to have permissions.
Example can be found here
<a href=""https://github.com/HomeLabHQ/runner"" rel=""nofollow noreferrer"">https://github.com/HomeLabHQ/runner</a></p>
","9522755",""
"78377843","69385940","2024-04-24 10:49:39","0","<p>It fails because there is no postgres instance running on the CI runner. So when your app tries to reach it at <code>postgresql://test:testing@localhost:5432/test</code> it cannot find it. Also, it is bad idea to try to connect the prod (or any environment) db in the outside world to the runner. An alternative is to use <a href=""https://pypi.org/project/testing.postgresql/"" rel=""nofollow noreferrer""><code>testing.postgresql</code></a>. This creates a database in a temp dir. But for this you might need <code>libpq-dev</code> and <code>gcc</code> to be installed in the runner, either via your app's docker image or in the CI yml file.</p>
","4260095",""
"70680812","69520599","2022-01-12 11:31:07","-2","<p>I'm located answer <a href=""https://stackoverflow.com/questions/40274484/fatal-could-not-read-username-for-https-github-com-device-not-configured"">here</a>. Looks like actions cannot handle tty input and throw error</p>
","12437547",""
"78884962","69520599","2024-08-18 15:16:19","0","<p>With checkout you already have access to the repo, you do not need to clone.</p>
<p>For publishing the docs, you have two options:</p>
<ol>
<li>Try creating a gh-pages branch directly and push it.</li>
<li>Use /doc instead of the gh-pages to publish the docs.</li>
</ol>
<p>You can also used <a href=""https://github.com/marketplace/actions/sphinx-docs"" rel=""nofollow noreferrer"">sphinx-doc action</a>, which implements what you are trying to do (generating sphinx docs and push them to your repo).</p>
","2778899",""
"70333581","70332762","2021-12-13 11:02:09","2","<p>Currently, it seems as though deleting <code>node_modules/</code> <s>as well as <code>package-lock.json</code></s> and regenerating them with <code>npm install</code> remedies this issue.</p>
<pre><code>&lt;in root&gt;
rm -rf node_modules/
npm install
</code></pre>
","17439239",""
"70478511","70478320","2021-12-25 07:11:54","22","<p>It was indeed quite simple to do. All I have to do is the following:</p>
<pre><code>on:
  push:
    paths-ignore:
      - 'README.md'
      - 'backup/**'
      - '**/*.draft.md'
</code></pre>
<p>As a reference, here is the documentation in detail: <a href=""https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#patterns-to-match-file-paths"" rel=""noreferrer"">https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#patterns-to-match-file-paths</a></p>
<p>As it can be seen from the documentation that the wildcard matches any file in any folder that contains a .draft.md match.</p>
","3102968",""
"77620053","70478320","2023-12-07 12:36:15","0","<p>I have tried this in my workflows and it's working fine for me. please follow the below code.</p>
<pre><code>on:
   push:
      paths-ignore:
         - '**/&lt;dir-path&gt;/**'
</code></pre>
","23059281",""
"70574054","70556460","2022-01-04 04:18:53","1","<blockquote>
<p>I would like to have a copy of the github repository on my account, and not just in the runner's &quot;container&quot;.</p>
</blockquote>
<p>That would be better address by a <em>mirroring</em> GitHub Action, like <a href=""https://github.com/wearerequired/git-mirror-action"" rel=""nofollow noreferrer""><code>wearerequired/git-mirror-action</code></a>, or better, in your case (using tokens): <a href=""https://github.com/pkgstore/github-action-mirror"" rel=""nofollow noreferrer""><code>pkgstore/github-action-mirror</code></a></p>
<pre class=""lang-yaml prettyprint-override""><code>name: &quot;Repository Mirror: GitHub&quot;

on:
  schedule:
    - cron:  &quot;*/5 * * * *&quot;
  workflow_dispatch:

jobs:
  mirror:
    runs-on: ubuntu-latest
    name: &quot;Mirror&quot;
    steps:
      - uses: pkgstore/github-action-mirror@main
        with:
          source_repo: &quot;https://github.com/${{ github.repository }}.git&quot;
          source_user: &quot;${{ secrets.MIRROR_SOURCE_USER_GITHUB }}&quot;
          source_token: &quot;${{ secrets.MIRROR_SOURCE_TOKEN_GITHUB }}&quot;
          target_repo: &quot;${{ secrets.MIRROR_TARGET_URL_GITHUB }}&quot;
          target_user: &quot;${{ secrets.MIRROR_TARGET_USER_GITHUB }}&quot;
          target_token: &quot;${{ secrets.MIRROR_TARGET_TOKEN_GITHUB }}&quot;
</code></pre>
<p>That way, you can send the source repository to a <em>private</em> repository of yours.</p>
","6309",""
"72014373","70619765","2022-04-26 12:57:03","0","<p>You can put the value into the GitHub organization secret. Check the following link to get further details:
<a href=""https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces#adding-secrets-for-an-organization"" rel=""nofollow noreferrer"">https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces#adding-secrets-for-an-organization</a></p>
","4427980",""
"75847873","70619765","2023-03-26 12:53:39","1","<p><em>Posting this as I missed the EDIT section of the question and couldn't find the answer in the answers section.</em></p>
<p>As <a href=""https://stackoverflow.com/users/8794667/dulvui"">dulvui</a> states in the EDIT section of the question, this is supported since January 10th 2023 as <a href=""https://github.blog/changelog/2023-01-10-github-actions-support-for-configuration-variables-in-workflows/"" rel=""nofollow noreferrer"">posted by Github</a>.</p>
<p>Specifically at <a href=""https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-organization"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-organization</a>, it states:</p>
<blockquote>
<p>You can create configuration variables for use across multiple workflows, and can define them at either the organization, repository, or environment level.</p>
</blockquote>
<p>And the documentation specifically for the <code>organization</code> level: <a href=""https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-organization"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-organization</a></p>
","7653022",""
"70766374","70765867","2022-01-19 06:53:12","1","<p>It seems that the AWS CLI is failing to configure the access key id and secret on the pipeline. In order to solve this and make it easier to manage in the long run, I would recommend using the pre-built actions from AWS to ease your pipeline's setup process.</p>
<p>The most common way of building a Github action pipeline for pushing images to AWS ECR is by using the following actions:</p>
<ul>
<li><code>aws-actions/configure-aws-credentials@v1</code></li>
<li><code>aws-actions/amazon-ecr-login@v1</code></li>
</ul>
<p>Using the combination of these actions together enables us to configure the pipeline's shell session to store temporary credentials for the AWS CLI and the ECR credentials for the docker login.</p>
<pre class=""lang-bash prettyprint-override""><code>    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: 1.0
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo &quot;Pushing image to ECR...&quot;
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo &quot;::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG&quot;
</code></pre>
<p>If the guide above is not sufficient and you need help in configuring the access keys and secrets, I would recommend following the blog written <a href=""https://aws.plainenglish.io/build-a-docker-image-and-publish-it-to-aws-ecr-using-github-actions-f20accd774c3"" rel=""nofollow noreferrer"">here</a></p>
","983476",""
"70969786","70765867","2022-02-03 10:38:57","1","<p>Actually, I just had to install AWS CLI on my EC2 instance.</p>
","17970861",""
"71554893","71525489","2022-03-21 08:51:26","2","<p>The <code>::command</code> can be logged to the console by any script or executable. They are special strings the GitHub runner will detect, interpret and then take the appropriate action on.</p>
<p>They are essentially the communication mechanism between the runner and the thing it's currently running. Anything that can write to the console can issue these strings.</p>
<p>It's totally up to you to build these stings, to inject any parameters these 'magic strings' require to function.</p>
<p>The docs you've found are the right docs on these to understand how to log there strings and what commands there are available to you.</p>
<p>If you're building a GitHub action using the JavaScript/Typescript toolkit, then it provides nice wrapper functions for these commands. <a href=""https://github.com/actions/toolkit/blob/main/packages/core/src/core.ts"" rel=""nofollow noreferrer"">The JavaScript SDK also gives you a sneak peak into how to composekthese strings</a>.</p>
<p>If you're building a composite action, container task or are directly issueing commands from a script block in the workflow, then it's up to you to build the correct strings and log these to the console.</p>
<p>More details:</p>
<ul>
<li><a href=""https://github.com/actions/toolkit/blob/main/packages/core/README.md"" rel=""nofollow noreferrer"">https://github.com/actions/toolkit/blob/main/packages/core/README.md</a></li>
<li><a href=""https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions"" rel=""nofollow noreferrer"">https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions</a> (you had found that already)</li>
</ul>
<p>Communicating through the console is the lowest common denominator between any tools running on just about any platform and requires no interprocess communication if any kind. It's the simplest way to communicate from a child process to it's parent.</p>
<p>You'd use the command to set an output variable.</p>
<pre><code>echo &quot;::set-output name=name::value&quot;
</code></pre>
<p>To be able to reference the value cross at you'd reference any output variable from any action.</p>
<p>Or set an environment variable which will be set for the next job: <code>echo &quot;action_state=yellow&quot; &gt;&gt; $GITHUB_ENV</code></p>
<p>See: <a href=""https://stackoverflow.com/a/57989070/736079"">https://stackoverflow.com/a/57989070/736079</a></p>
","736079",""
"71741274","71741116","2022-04-04 17:20:36","0","<p>The easiest solution would be to trigger the GitHub action workflow from the CircleCI Workflow by <a href=""https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event"" rel=""nofollow noreferrer"">create a workflow dispatch event</a>. You can use the following curl command to trigger the workflow or you could also use <a href=""https://cli.github.com/manual/gh_api"" rel=""nofollow noreferrer""><code>gh api</code></a>:</p>
<pre class=""lang-sh prettyprint-override""><code>curl \
  -X POST \
  -H &quot;Accept: application/vnd.github.v3+json&quot; \
  https://api.github.com/repos/&lt;owner&gt;/&lt;repo_name&gt;/actions/workflows/&lt;workflow&gt;/dispatches \
  -d '{&quot;ref&quot;:&quot;ref&quot;}'
</code></pre>
","10951752",""
"72278912","72278554","2022-05-17 18:18:56","0","<p>The best practice is to run your commands with <code>working-directory: </code> for those steps to make them execute in a certain directory - relative to your root folder.</p>
","2067877",""
"72280530","72278554","2022-05-17 20:49:45","5","<p>The issue was directory structure. Once i listed the files in the directory and found the path to the files, the action ran successfully. Here is the final yml script.</p>
<pre><code>on:
  push:
     branches:
       - master

jobs:
  generate-build-number-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # required for accessing files in repository.

      # https://github.com/marketplace/actions/build-number-generator
      - name: Generate build number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}

      - name: Print new build number
        run: echo &quot;Build number is $BUILD_NUMBER&quot;

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Build Docker
        run: ${PWD}/docker/build-docker
      - name: Push Docker
        run: ${PWD}/docker/push-docker
</code></pre>
","11821400",""
"72478754","72478547","2022-06-02 15:33:07","0","<p>Well, I actually answered it almost myself when phrasing the question.</p>
<p>Simply create 2 builds and 2 images. One incrementing (so that you always could roll-back to an older version) and update the latest version.</p>
<p>Prioritize the latest so that it is available faster.</p>
<pre><code>- name: Build the Docker image
  run: docker build . -t me/myrepo:latest    

- name: Build the Docker image
  run: docker build .
</code></pre>
<p>-t me/myrepo:${{github.run_number}}</p>
<p>and then push it twice.</p>
<pre><code>- name: Push the also the latest Tag to Docker Hub
  run: |
    docker push me/myrepo:latest

- name: Push the new Tag to Docker Hub
  run: |
    docker push me/myrepo:${{github.run_number}}
</code></pre>
","2815264",""
"72958772","72919393","2022-07-12 21:53:08","2","<p>This is a consequence of a 2011 design decision regarding <a href=""https://Nodeload2:%20Downloads%20Reloaded"" rel=""nofollow noreferrer"">https://github.blog/2011-08-02-nodeload2-downloads-reloaded/</a></p>
<blockquote>
<p>When implementing a proxy of any kind, you have to deal with clients that can’t read content as fast as you can send it.</p>
<p>When an HTTP server response stream can’t send any more data to you, <code>write()</code> returns false.<br />
Then, you can pause the proxied HTTP request stream, until the server response emits a <code>drain</code> event.<br />
The <code>drain</code> event means it’s ready to send more data, and that you can now resume the proxied HTTP request stream.</p>
</blockquote>
<p>TO <a href=""https://en.wikipedia.org/wiki/Denial-of-service_attack"" rel=""nofollow noreferrer"">avoid DDOS</a>, it is better to manage that stream from a temporary URL, rather than a fixed one.</p>
<p>You can use <a href=""https://stackoverflow.com/a/26644485/6309""><code>-D</code> to display response header</a>, but you would still need to post-process its answer to get the redirection URL.</p>
","6309",""
"75577206","72919393","2023-02-27 06:04:06","1","<p><a href=""https://stackoverflow.com/a/72958772/885922"">VonC's answer</a> covers why GitHub has implemented this using a temporary URL, but here's answers to your other subquestions:</p>
<blockquote>
<p>why not have this temporary URL returned directly by call to cURL rather than having it only contained in the header</p>
</blockquote>
<p>The GitHub API is following how HTTP redirections are expected to work. From the <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections"" rel=""nofollow noreferrer"">MDN web docs</a>:</p>
<blockquote>
<p>In HTTP, redirection is triggered by a server sending a special redirect response to a request. Redirect responses have status codes that start with 3, and a Location header holding the URL to redirect to.</p>
</blockquote>
<p>The benefit of this is that clients e.g. web browsers, or even <code>curl</code>, then understand how to handle this redirection.</p>
<p>So to answer your other subquestion:</p>
<blockquote>
<p>is there a flag I could pass to cURL that would give me the value of Location directly?</p>
</blockquote>
<p>Yes there is. The <code>--location</code> or <code>-L</code> flags will tell <code>curl</code> to read the <code>Location</code> value for the header, and do the second request for you. From the <a href=""https://curl.se/docs/manpage.html#-L"" rel=""nofollow noreferrer"">man page</a>:</p>
<blockquote>
<p>If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response code), this option will make curl redo the request on the new place.</p>
</blockquote>
","885922",""
"73143764","73143492","2022-07-27 19:39:28","0","<p>AWS Aurora does not support stopping individual instances/nodes. <code>stop-db-cluster</code> is the only option. It looks like you only have a one node cluster anyway, so what would be the difference?</p>
","13070",""
"73261753","73255602","2022-08-06 17:02:36","1","<p>I just had to add the argument <code>--exit-code-from</code> while running the Docker container and that helped GitHub actions to identify the exit code properly.</p>
","9801092",""
"74231975","73394214","2022-10-28 07:31:58","1","<p>You should only need to apt-get the package to install the driver:</p>
<pre><code>    steps:
      - uses: actions/checkout@v3

      - name: Install Microsoft ODBC
        run: sudo ACCEPT_EULA=Y apt-get install msodbcsql18 -y
</code></pre>
<p>that successfully installs for me. Worth pointing out though that when you connect you'll need to use the mapped port to the container:</p>
<pre><code>        env:
          PORT: ${{ job.services.mssql.ports[1433] }}
</code></pre>
<p>this assumes SQL Server was setup like:</p>
<pre><code>      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports: [1433]
        env:
          MSSQL_PID: Developer
          SA_PASSWORD: iugeshrigsuerbiwer
          ACCEPT_EULA: Y
</code></pre>
","912408",""
"75276882","73394214","2023-01-29 17:25:24","0","<p>You need to run the commands with elevated privileges.
Simply, add <code>shell</code> with <code>sudo</code> like so:</p>
<pre><code>- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    ...
    sudo apt-get install -y unixodbc-dev
  shell: sudo bash {0}
</code></pre>
","151641",""
"76351980","73394214","2023-05-28 14:28:23","1","<p>Because all of the above worked for me only sometimes for some reason. I wrote an action that follows the exact instructions from microsoft to install mssql odbc drivers for any distro. Here <a href=""https://github.com/Yarden-zamir/install-mssql-odbc"" rel=""nofollow noreferrer"">https://github.com/Yarden-zamir/install-mssql-odbc</a>. If anyone stumbling onto here like me in the future and finds this useful that would be awesome.</p>
<p>You can use it like</p>
<pre><code>      - uses: Yarden-zamir/install-mssql-odbc@main
</code></pre>
<p>or</p>
<pre><code># all inputs
      - uses: Yarden-zamir/install-mssql-odbc@main
        with:
          ODBC_VERSION: 17
          DISTRO: Alpine
          DOCS_URL: https://yarden-zamir.com/alternate-docs-path.md
          REMOVE_EXITS: true
</code></pre>
","19101016",""
"73499601","73497571","2022-08-26 10:28:59","2","<p>I haven't understood the cause yet.</p>
<p>My current workaround is to disable the configuration cache on CI builds adding the option <code>--no-configuration-cache</code> to all gradle commands e.g.</p>
<pre><code>./gradlew test --no-configuration-cache
</code></pre>
<p>This overwrites the setting of <code>gradle.properties</code>.</p>
","2011622",""
"77691574","73497571","2023-12-20 12:24:36","0","<p>Same here, config cache is failing in jenkins pipeline, and working fine in local.</p>
<p>See <a href=""https://stackoverflow.com/a/69113397/7466467"">this comment</a>, it helped. It changes the error to a warning, lets it ignore problems in the config cache (only when it fails) and stores it anyway</p>
<p>Console Output:</p>
<pre><code>3 problems were found storing the configuration cache, 1 of which seems unique.
- Task `:app:buildKotlinToolingMetadata` of type `org.jetbrains.kotlin.gradle.tooling.BuildKotlinToolingMetadataTask$FromKotlinExtension`: invocation of 'Task.project' at execution time is unsupported.
....
...

BUILD SUCCESSFUL in 4m 56s
1779 actionable tasks: 715 executed, 1062 from cache, 2 up-to-date
Configuration cache entry stored with 3 problems.
</code></pre>
<p>I will update about it's impact if there is any.</p>
","7466467",""
"73667912","73626276","2022-09-09 22:10:35","1","<p>As explained by @ianyoung, the problem was with the pip file.  The <a href=""https://realpython.com/lessons/using-requirement-files/#:%7E:text=A%20Beginner%27s%20Guide%20to%20Pip&amp;text=A%20requirements%20file%20is%20a,current%20projects%20dependencies%20to%20stdout%20."" rel=""nofollow noreferrer"">requirements.txt</a> was empty, the requirements file is a list of all of a project’s dependencies. This includes the dependencies needed by the dependencies. It also contains the specific version of each dependency, specified with a double equals sign (==).</p>
","17544312",""
"74052579","74051795","2022-10-13 08:21:25","12","<p>The GitHub actions mentioned in that quote are themselves dependent on Node.js, specifically on major version 12 of Node.js.
And, as stated in that quote, <a href=""https://github.blog/changelog/2022-09-22-github-actions-all-actions-will-begin-running-on-node16-instead-of-node12/"" rel=""nofollow noreferrer"">the use of Node.js 12 in actions has recently become deprecated</a>.</p>
<p>Support for Node.js 12 will not be dropped out of a sudden. However, maintainers should act to update their actions and users should be on the look-out for new versions. Unfortunately in this case, issues have been filed for both actions here (<a href=""https://github.com/actions-rs/toolchain/issues/219"" rel=""nofollow noreferrer"">actions-rs/toolchain#219</a> and <a href=""https://github.com/actions-rs/cargo/issues/216"" rel=""nofollow noreferrer"">actions-rs/cargo#216</a>), but they might never be attended because <a href=""https://github.com/actions-rs/toolchain/issues/216"" rel=""nofollow noreferrer"">actions-rs is unmaintained since 2020</a>. As such, we may need to rely on <strong>alternative actions</strong>.</p>
<p>To use <a href=""https://github.com/actions-rust-lang/setup-rust-toolchain"" rel=""nofollow noreferrer""><code>setup-rust-toolchain</code></a>, for example, we can port the <code>fmt</code> job to in the question into the code below.</p>
<pre class=""lang-yaml prettyprint-override""><code>  # Check formatting with rustfmt
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        uses: actions-rust-lang/rustfmt@v1
</code></pre>
<hr />
<p>Alternatively, there is <a href=""https://github.com/dtolnay/rust-toolchain"" rel=""nofollow noreferrer"">dtolnay's toolchain action</a>.</p>
<pre class=""lang-yaml prettyprint-override""><code>  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check
</code></pre>
","1233251",""
"74113575","74112918","2022-10-18 15:26:03","5","<p>The way I've addressed a similar need is to use <code>tee</code>:</p>
<pre class=""lang-yaml prettyprint-override""><code>    steps:
      - name: Run Tool
        run: |
          some_tool | tee output.log
        shell: bash
</code></pre>
<p>That results in you getting the same logs you'd always see in the GitHub Actions console, while also persisting them to disk. If you want stderr too, do</p>
<pre class=""lang-bash prettyprint-override""><code>some_tool 2&gt;&amp;1 | tee output.log
</code></pre>
<p>Then, in a later step in the same job, you can do whatever you like with those logs, using the <a href=""https://docs.github.com/en/actions/learn-github-actions/expressions#failure"" rel=""noreferrer""><code>if: ${{ failure() }}</code> syntax</a>:</p>
<pre class=""lang-yaml prettyprint-override""><code>    steps:
      - name: Persist logs
        if: ${{ failure() }}
        run: |
          cat output.log | do_something_with_logs
        shell: bash
</code></pre>
<p>If you need to persist the logs across a job boundary, you could use <a href=""https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts"" rel=""noreferrer"">artifacts</a>.</p>
","1159783",""
"74117425","74114983","2022-10-18 21:01:06","0","<p>I found that the problem was that after I had moved my file I wasn't committing.</p>
<p>I didn't know you had to commit in the github actions for the file to actually end up in the repo.</p>
","20230484",""
"74165611","74164817","2022-10-22 17:21:50","1","<p>Yes - it's possible. One way to achieve that will be to use existing open-source actions from GitHub Marketplace, for example:
<a href=""https://github.com/marketplace/actions/aws-s3-github-action"" rel=""nofollow noreferrer"">https://github.com/marketplace/actions/aws-s3-github-action</a></p>
","2067877",""
"74520896","74349847","2022-11-21 15:01:18","0","<p>It is a feature - old value of the secret is not visible.</p>
<p>You can only enter new value.</p>
","8791568",""
"76480296","74572309","2023-06-15 07:57:29","0","<p>There exists a reusable workflow that can force runs of a workflow to run consecutively (i.e., in order). This solved my problem.</p>
<p>Here is the reusable workflow: <a href=""https://github.com/mktcode/consecutive-workflow-action"" rel=""nofollow noreferrer"">https://github.com/mktcode/consecutive-workflow-action</a></p>
","4290962",""
"75326472","74869907","2023-02-02 16:54:57","1","<p>You are probably missing parameters in the command line, here I would say <code>provisioningProfiles</code> parameter in particular.</p>
<p>To make sure you can run the command correctly you can:</p>
<ol>
<li>Open Xcode on your development machine and disable automatic signing if not already unchecked</li>
<li>Still in Xcode, select your scheme and then run <code>Product</code> &gt; <code>Archive</code> from the menu. Click on <code>Distribute app</code> in the new window and go through the steps. Make sure you select a valid provisioning profile and certificate at this step. Go to the end and just export (don't go to the AppStore), Xcode will generate you an export folder. You should see a file named <code>ExportOptions.plist</code> in this folder, similar to the following:
<pre class=""lang-xml prettyprint-override""><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
    &lt;dict&gt;
        &lt;key&gt;destination&lt;/key&gt;
        &lt;string&gt;export&lt;/string&gt;
        &lt;key&gt;method&lt;/key&gt;
        &lt;string&gt;app-store&lt;/string&gt;
        &lt;key&gt;provisioningProfiles&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;your.bundle.id&lt;/key&gt;
            &lt;string&gt;Provisioning Profile name&lt;/string&gt;
        &lt;/dict&gt;
        &lt;key&gt;signingCertificate&lt;/key&gt;
        &lt;string&gt;Apple Distribution&lt;/string&gt;
        &lt;key&gt;signingStyle&lt;/key&gt;
        &lt;string&gt;manual&lt;/string&gt;
        &lt;key&gt;teamID&lt;/key&gt;
        &lt;string&gt;123ABC12&lt;/string&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
</li>
<li>Open the exported folder and look for a file named <code>ExportOptions.plist</code>. This file basically contain the arguments that you should pass to your CI command line to mimic what Xcode does locally</li>
<li>Encode this file as base64 and store it as a Github Actions secret, e.g. <code>IOS_EXPORT_OPTIONS_PLIST</code></li>
<li>Resolve the file in your Github Action step and decode it from base64, store it somewhere, say $EXPORT_OPTIONS_PATH</li>
<li>Run your command line with with this added option: <code>xcodebuild archive -yourparams -exportOptionsPlist $EXPORT_OPTIONS_PATH</code></li>
</ol>
<p>Note: You can run <code>xcodebuild -h</code> to see all the available options that you can add to the ExportOptions.plist file.</p>
","702954",""
"75023910","74912797","2023-01-05 20:18:07","3","<p>I'm pretty certain the issue happens on Linux specifically, as on Windows and macOS it's running inside a VM. The reason why it would occur in a &quot;real Linux&quot; machine and not in a VM is because user ids and group ids are shared between the &quot;docker host&quot; and docker containers (see more <a href=""https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf"" rel=""nofollow noreferrer"">here</a>)</p>
<p>The GitHub Actions probably has designated permissions for the uids/gids that are contained in the tar.gz and also of the tar.gz itself, while on your local macOS/Windows the dedicated VM for docker doesn't have any &quot;real&quot; user management using Linux.</p>
<p>I had a similar issue when I used Bitbucket's CI which has some weird policies arounds <a href=""https://confluence.atlassian.com/bbkb/build-fails-due-to-error-container-id-cannot-be-mapped-to-host-id-error-1189491384.html"" rel=""nofollow noreferrer"">uids/gids.</a> This is probably a similar case.</p>
","9266051",""
"74951756","74927029","2022-12-29 13:32:15","8","<p>As per my experience, I suggest you to put the Nuget Application into another repository and follow the below instructions.</p>
<p>I've done this many times. Let me walk you through it.</p>
<h3>1. Create API Key:</h3>
<p>Sign in to nuget.org then go to the API Keys management and create a key.</p>
<h3>2. Add the API key to GitHub repository</h3>
<p>Go to GitHub and desired repository settings, then to Secrets. Create a new secret and paste there API key created on the first step.</p>
<p><a href=""https://i.sstatic.net/HA1sL.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/HA1sL.png"" alt=""enter image description here"" /></a></p>
<h3>3. Add workflow instructions:</h3>
<p>Create a file under the root
<code>&lt; YOUR REPO &gt; /.github/workflows/release.yml</code></p>
<pre><code>name: Release to NuGet

on:
  release:
    types: [published]
    
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
    - name: Build
      run: dotnet build -c Release
    - name: Test
      run: dotnet test -c Release --no-build
    - name: Pack nugets
      run: dotnet pack -c Release --no-build --output .
    - name: Push to NuGet
      run: dotnet nuget push &quot;*.nupkg&quot; --api-key ${{secrets.nuget_api_key}} --source https://api.nuget.org/v3/index.json
</code></pre>
<p>It does:</p>
<ul>
<li>triggers on release publish</li>
<li>runs on ubuntu-latest</li>
<li>setup .NET SDK</li>
<li>runs dotnet build then tests</li>
<li>packs nugets and push it nuget.org using the attached nuget key</li>
</ul>
<h3>4. Create release:</h3>
<ul>
<li><p>Find the Releases link on the main page of your repo<br />
<a href=""https://i.sstatic.net/ZYAWB.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/ZYAWB.png"" alt=""enter image description here"" /></a></p>
</li>
<li><p>Then create a new release<br />
<a href=""https://i.sstatic.net/njvlS.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/njvlS.png"" alt=""enter image description here"" /></a></p>
</li>
<li><p>Verify the success of workflow.<br />
<a href=""https://i.sstatic.net/2BWZs.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/2BWZs.png"" alt=""enter image description here"" /></a></p>
</li>
</ul>
<hr />
<p>Helpful Links:</p>
<ol>
<li><a href=""https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry"" rel=""noreferrer"">Github Doc</a></li>
</ol>
","12017533",""
"74953373","74927029","2022-12-29 16:01:41","1","<p>The alternative to <a href=""https://stackoverflow.com/users/12017533/jiya"">Jiya</a>'s <a href=""https://stackoverflow.com/a/74951756"">answer</a> is to use the GitHub action <a href=""https://github.com/linch90/publish-nuget"" rel=""nofollow noreferrer""><code>linch90/publish-nuget</code></a>, which does the same kind of operation, and will do the same <a href=""https://github.com/linch90/publish-nuget/blob/8c0b10adcf4fe617d955c36b0e84d23639a8108a/index.js#L102-L107"" rel=""nofollow noreferrer""><code>dotnet nuget push</code></a>.</p>
<pre class=""lang-yaml prettyprint-override""><code>name: publish to nuget
on:
  push:
    branches:
      - master # Default release branch
jobs:
  publish:
    name: build, pack &amp; publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # - name: Setup dotnet
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: 6.0.0

      # Publish
      - name: publish on version change
        id: publish_nuget
        uses: alirezanet/publish-nuget@v3.0.0
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Core/Core.csproj
          
          # NuGet package id, used for version detection &amp; defaults to project name
          # PACKAGE_NAME: Core
          
          # Filepath with version info, relative to root of repository &amp; defaults to PROJECT_FILE_PATH
          # VERSION_FILE_PATH: Directory.Build.props

          # Regex pattern to extract version info in a capturing group
          # VERSION_REGEX: ^\s*&lt;Version&gt;(.*)&lt;\/Version&gt;\s*$
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH &amp; VERSION_REGEX
          # VERSION_STATIC: 1.0.0

          # Flag to toggle git tagging, enabled by default
          # TAG_COMMIT: true

          # Format of the git tag, [*] gets replaced with actual version
          # TAG_FORMAT: v*

          # API key to authenticate with NuGet server
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          # NUGET_SOURCE: https://api.nuget.org

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          # INCLUDE_SYMBOLS: false

          # Flag to toggle not building the project and letting pack command handle restoring &amp; building, disabled by default
          # NO_BUILD: false
</code></pre>
<blockquote>
<p>Project gets published only if there's a <code>NUGET_KEY</code> configured in the repository (API key to authenticate with NuGet server)</p>
</blockquote>
<p>So you need to register a <code>NUGET_KEY</code> secret in your repository.</p>
","6309",""
"77239274","74927029","2023-10-05 17:17:31","2","<h2>Create the action using actions/setup-dotnet@v3</h2>
<pre><code>name: Publish Bolivia Package
runs-on: ubuntu-latest
permissions:
  contents: read
  packages: write # permission for the github token
steps:
  - uses: actions/checkout@v3
  - uses: actions/setup-dotnet@v3
    with:
      dotnet-version: '3.1.x' # No change it
      source-url: https://nuget.pkg.github.com/&lt;owner|organization&gt;/index.json
    env:
      NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  - name: Build project
    run: dotnet build --configuration Release
  - name: Create the package
    run: dotnet pack --configuration Release
  - name: Publish the package to GPR
    run: dotnet nuget push bin/Release/*.nupkg
</code></pre>
","9028384",""
"74973611","74973574","2023-01-01 07:58:59","2","<p>If your modules are on different paths within the same Git repository, you could use a <a href=""https://github.com/dorny/paths-filter"" rel=""nofollow noreferrer"">path-filter action</a>, as <a href=""https://stackoverflow.com/a/67941131/6309"">illustrated here</a>.</p>
<p>Note that you cannot tag just a part of a repository, but, if your changes involves only that one module, you can then decide apply a (global) tag with a naming convention reflecting the nature of the change (IE only module1 or only module2).</p>
","6309",""
"74973794","74973574","2023-01-01 09:04:11","2","<p>If you only ever want to publish <code>module1</code>, you can set <code>publish / skip := true</code> in the project settings in <code>build.sbt</code> for other modules and the root project.</p>
","5389127",""
"75329727","75322937","2023-02-02 22:50:15","1","<p>No, you cannot do this. It’s completely locked to that folder.</p>
<p>Only for action.yml files this is allowed (can be put anywhere, but then you do have to reference them differently with the full folder path).</p>
","4395661",""
"75324758","75324115","2023-02-02 14:39:58","1","<p>You can use the <a href=""https://github.com/marketplace/actions/add-an-issue-link"" rel=""nofollow noreferrer"">Add an issue link</a> Action for that.</p>
<p>This Action allows linking issues to Pull Requests. For example:</p>
<pre><code>name: 'Issue Links'
on:
  pull_request:
    types: [opened]

jobs:
  issue-links:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: tkt-actions/add-issue-links@v1.8.1
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}' # required
          branch-prefix: 'issue-' # required
</code></pre>
<p>This workflow will trigger on Pull Request open and link related issues mentioned in the PR body.</p>
<p>Make sure to set the corresponding permission for the job:</p>
<pre><code>permissions:
  pull-requests: write
</code></pre>
<p>For more about these permissions visit the <a href=""https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token"" rel=""nofollow noreferrer"">Permissions for the <code>GITHUB_TOKEN</code></a>.</p>
","7328018",""
"75412290","75386396","2023-02-10 14:11:18","0","<p>At the YAML level, single quotes around <code>${{ secrets... }}</code> should fix the syntax error.</p>
<p>But, according to the <a href=""https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability"" rel=""nofollow noreferrer"">Context availability</a>, the <code>secrets</code> context is not allowed under <code>stratey</code>. The allowed contexts are:</p>
<pre><code>jobs.&lt;job_id&gt;.strategy      github, needs, vars, inputs
</code></pre>
<p>You can make use of the <a href=""https://docs.github.com/en/actions/learn-github-actions/contexts#vars-context"" rel=""nofollow noreferrer""><code>vars</code> context</a> for your use case.</p>
<p>Apart from that, linting your workflow with <a href=""https://rhysd.github.io/actionlint/"" rel=""nofollow noreferrer"">https://rhysd.github.io/actionlint/</a> would be much faster to identify potential issues.</p>
<hr />
<p><strong>UPDATE</strong> (by <a href=""https://stackoverflow.com/users/4473386/dmytro-chasovskyi"">Dmytro Chasovskyi</a>)</p>
<p>Here is an example with the <code>vars</code> context:</p>
<p>With a variable <code>DOMAINS</code> having this config:</p>
<pre class=""lang-json prettyprint-override""><code>{
   &quot;v1&quot;: {
     &quot;url&quot;: &quot;http://localhost:80/api/v1&quot;
   },
   &quot;v2&quot;: {
     &quot;url&quot;: &quot;http://localhost:80/api/v2&quot;
   }
}
</code></pre>
<p>the workflow will be:</p>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
  build:
    strategy:
      matrix:
        domain: [['main', 'books-v1', '${{ vars.DOMAINS.v1.url }}'], ['old-main', 'books-v2', '${{ vars.DOMAINS.v2.url }}']]
</code></pre>
","7670262",""
"75445991","75438906","2023-02-14 09:43:47","0","<p>At the bottom of this page...</p>
<p><a href=""https://github.com/b0fgroup/b2/issues/105"" rel=""nofollow noreferrer"">B2 4.7.1 MacOS Armv8 package bundles x86_64 binary</a></p>
<p>...it says:</p>
<pre><code>./b2 architecture=arm address-model=64 -s NO_LZMA=1 -s NO_ZSTD=1 abi=aapcs
</code></pre>
<p>That worked for me.  The entire step that I have on github actions is:</p>
<pre><code>- name: Boost
  run: |
    curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz
    tar xfz boost_1_80_0.tar.gz
    cd boost_1_80_0
    ./bootstrap.sh
    ./b2 architecture=arm address-model=64 -s NO_LZMA=1 -s NO_ZSTD=1 abi=aapcs install
    lipo /usr/local/lib/libboost_*.dylib -info
</code></pre>
","2022499",""
"75735736","75733616","2023-03-14 16:13:58","14","<p>According to the <a href=""https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow"" rel=""noreferrer"">GitHub official documentation</a>:</p>
<blockquote>
<p>You call a reusable workflow by using the uses keyword. Unlike when you are using actions within a workflow, you call reusable workflows directly within a job, and not from within job steps.</p>
</blockquote>
<p>Therefore, <strong>you can't call a reusable workflow from a job <code>step</code></strong>.</p>
<hr />
<p>A workaround in your case could be using a <a href=""https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-public-action-in-a-subdirectory"" rel=""noreferrer"">local action</a>, which basically allows you to use an action in the same repository as the workflow.</p>
<p><strong>Example of a local action call:</strong></p>
<pre><code>jobs:
  my_first_job:
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Use local my-action
        uses: ./.github/actions/my-action
</code></pre>
<p><em>Note that you need to inform the path to the directory that contains the action in your workflow's repository. Therefore, to access the action file, you must check out your repository before using the action with the <code>actions/checkout</code>.</em></p>
<p>This local action could be a <a href=""https://docs.github.com/en/actions/creating-actions/creating-a-composite-action"" rel=""noreferrer"">composite action</a>, similar to what a reusable workflow could achieve using actions, scripts or shell commands. I recommend <a href=""https://dev.to/n3wt0n/composite-actions-vs-reusable-workflows-what-is-the-difference-github-actions-11kd"" rel=""noreferrer"">this article to understand the difference between composite actions and reusable workflows</a>.</p>
","8496462",""
"75846432","75839566","2023-03-26 07:30:01","1","<p>To enable access to your MongoDB database via GitHub Actions, you need to add the IP address and select the <strong>Allow Access from Anywhere</strong> option.</p>
","21485808",""
"78117472","75839566","2024-03-06 21:09:19","-1","<p>Rather than allowing <em>any</em> IP to access the cluster, you can add the runner's IP for the duration of the job:</p>
<ul>
<li><p>As a secret, supply <a href=""https://www.mongodb.com/docs/atlas/configure-api-access/#std-label-create-org-api-key"" rel=""nofollow noreferrer"">API credentials</a> with the Project Owner role. <strong>Note</strong> that you must also permit access to any IP for the Atlas administration API itself (<a href=""https://www.mongodb.com/docs/atlas/configure-api-access/#optional--require-an-ip-access-list-for-the-atlas-administration-api"" rel=""nofollow noreferrer"">docs</a>).</p>
</li>
<li><p>Make a request to e.g. <a href=""https://checkip.amazonaws.com"" rel=""nofollow noreferrer"">https://checkip.amazonaws.com</a> to find out what the specific runner's public IP is:</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: Get the public IP of the runner
  id: get-ip
  shell: bash
  run: |
    echo &quot;ip-address=$(curl https://checkip.amazonaws.com)&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
</code></pre>
</li>
<li><p>Make a request to the MongoDB Atlas API <a href=""https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Project-IP-Access-List/operation/createProjectIpAccessList"" rel=""nofollow noreferrer""><code>POST /groups/{groupId}/accessList</code></a> to permit access to that IP:</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: Permit the runner to access MongoDB Atlas
  id: allow-ip
  shell: bash
  run: |
    curl \
       --data '[{&quot;ipAddress&quot;: &quot;${{ steps.get-ip.outputs.ip-address }}&quot;, &quot;comment&quot;: &quot;GitHub Actions Runner&quot;}]' \
       --digest \
       --header 'Accept: application/vnd.atlas.2023-02-01+json' \
       --header 'Content-Type: application/json' \
       --user &quot;$USERNAME:$PASSWORD&quot; \
       &quot;https://cloud.mongodb.com/api/atlas/v2/groups/$GROUP_ID/accessList&quot;
  env:
    GROUP_ID: ${{ secrets.ATLAS_GROUP_ID }}
    PASSWORD: ${{ secrets.ATLAS_PRIVATE_KEY }}
    USERNAME: ${{ secrets.ATLAS_PUBLIC_KEY }}
</code></pre>
</li>
<li><p>After the access has happened, on success <em>or</em> failure, make a request to <a href=""https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Project-IP-Access-List/operation/deleteProjectIpAccessList"" rel=""nofollow noreferrer""><code>DELETE /groups/{groupId}/accessList/{entryValue}</code></a> to revoke access:</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: Revoke the runner's access to MongoDB Atlas
  if: always() &amp;&amp; steps.allow-ip.outcome == 'success'
  shell: bash
  run: |
    curl \
       --digest \
       --header 'Accept: application/vnd.atlas.2023-02-01+json' \
       --request 'DELETE' \
       --user &quot;$USERNAME:$PASSWORD&quot; \
       &quot;https://cloud.mongodb.com/api/atlas/v2/groups/$GROUP_ID/accessList/${{ steps.get-ip.outputs.ip-address }}&quot;
  env:
    GROUP_ID: ${{ secrets.ATLAS_GROUP_ID }}
    PASSWORD: ${{ secrets.ATLAS_PRIVATE_KEY }}
    USERNAME: ${{ secrets.ATLAS_PUBLIC_KEY }}
</code></pre>
</li>
</ul>
<p>Another way to do this, including automatically applying the post-job step, is in a <a href=""https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action"" rel=""nofollow noreferrer"">custom JavaScript action</a> (using <a href=""https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runspost"" rel=""nofollow noreferrer""><code>runs.post</code></a> to make the <code>DELETE</code> request). I have <a href=""https://github.com/marketplace/actions/allow-mongodb-atlas-ip"" rel=""nofollow noreferrer"">published</a> such an action to the marketplace.</p>
","3001761",""
"78593379","75839566","2024-06-07 17:42:14","0","<p>Just to add to the answer by @jonrsharpe, this approach can be simplified by using the <a href=""https://github.com/mongodb/atlas-github-action"" rel=""nofollow noreferrer"">MongoDB Atlas CLI github action</a>.</p>
<pre><code>  # Grant temporary MongoDB access to this Github Action runner ip address
  - name: Get the public IP of this runner
    id: get_gh_runner_ip
    shell: bash
    run: |
      echo &quot;ip_address=$(curl https://checkip.amazonaws.com)&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
  - name: Setup MongoDB Atlas cli
    uses: mongodb/atlas-github-action@v0.2.0
  - name: Add runner IP to MongoDB access list
    shell: bash
    run: |
      atlas accessLists create ${{ steps.get_gh_runner_ip.outputs.ip_address }} --type ipAddress --projectId ${{ env.MONGODB_ATLAS_PROJECT_ID }} --comment  &quot;Temporary access for GH Action&quot;
</code></pre>
<p>At the end of your workflow:</p>
<pre><code>    - name: Remove GH runner IP from MongDB access list
    shell: bash
    run: |
      atlas accessLists delete ${{ steps.get_gh_runner_ip.outputs.ip_address }} --projectId ${{ env.MONGODB_ATLAS_PROJECT_ID }} --force
</code></pre>
","9822967",""
"75997281","75996853","2023-04-12 15:27:23","2","<p>There are 2 issues in play:</p>
<ol>
<li>You need to declare the output variable at the step as well as at the job level</li>
<li>Bash will stop processing when a command returns an error.</li>
</ol>
<h2>Declare the output variable at the job level</h2>
<p>Your 2nd job can't access the step output without you also declaring it as a job output:</p>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
  check-for-changes:
    # Map a step output to a job output
    outputs:
      exit_code: ${{ steps.check.outputs.exit_code}}

    steps:
      - name: Check Black Formatting
        id: check
        run: |
          echo &quot;exit_code=1&quot; &gt;&gt; $GITHUB_OUTPUT
</code></pre>
<p>Then reference that in the 2nd job:</p>
<pre class=""lang-yaml prettyprint-override""><code>jobs: 
  black-formatting:
    runs-on: ubuntu-latest
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.exit_code == 1 }}
</code></pre>
<h2>Bash stops processing when a command returns a non-0 exit code.</h2>
<p>Your script <code>black black_test.py --check</code> returns a non-0 exit code, bash will stop processing the rest of the script. The code to set the <code>exit_code</code> variable and the code to set the output variable are skipped, so the value of the output variable will either be <code>0</code> or <code> </code>.</p>
<p>You can capture the exit code and continue processing, you can add <code>|| exit_code=$?</code> after the failing command:</p>
<pre class=""lang-yaml prettyprint-override""><code>      - name: Check Black Formatting
        id: check
        continue-on-error: true
        run: |
          black black_test.py --check || exit_code=$?
          echo &quot;exit_code=$exit_code&quot; &gt;&gt; $GITHUB_OUTPUT
</code></pre>
<p>The <code>continue-on-error: true</code> doesn't let bash keep processing, it just doesn't cause the job to fail if anything fails in the script, even if the script is terminated half-way.</p>
<h2>Final script:</h2>
<pre class=""lang-yaml prettyprint-override""><code>jobs:
    
  check-for-changes:
    outputs:
      exit_code: ${{ steps.check.outputs.exit_code }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Check Black Formatting
        id: check
        run: |
          black black_test.py --check || exit_code=$?
          echo &quot;exit_code=$exit_code&quot; &gt;&gt; $GITHUB_OUTPUT

  black-formatting:
    runs-on: ubuntu-latest
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.exit_code == 1 }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Apply Black Formatting
        run: black black_test.py
</code></pre>
","736079",""
"76029814","76029565","2023-04-16 19:01:26","2","<p>I'm not familiar with those two appleboy actions but taking a quick look at the projects, there was a recent release of their base docker image that changes how env vars are getting used:</p>
<p><a href=""https://github.com/appleboy/drone-ssh/pull/252"" rel=""nofollow noreferrer"">https://github.com/appleboy/drone-ssh/pull/252</a></p>
<blockquote>
<p>Modify the EnvVars slice to include INPUT_ prefix when needed</p>
<p>...</p>
</blockquote>
<p>Additionally, you're using a very old / outdated version of the <code>actions/checkout@v1</code></p>
<p>I'd strongly recommend updating your config to handle the latest versions.</p>
","4526019",""
"76030411","76029565","2023-04-16 21:26:00","7","<p>I finally found the solution here: <a href=""https://github.com/appleboy/scp-action/issues/113"" rel=""nofollow noreferrer"">https://github.com/appleboy/scp-action/issues/113</a></p>
<p>Change</p>
<pre><code>env:
  host: ${{ secrets.SSH_HOST }}
  username: ${{ secrets.SSH_USER }}
  key: ${{ secrets.SSH_KEY }}
  port: ${{ secrets.SSH_PORT}}
with:
  source: '.'
  target: ${{ secrets.PATH }}
</code></pre>
<p>to</p>
<pre><code>with:
  host: ${{ secrets.SSH_HOST }}
  username: ${{ secrets.SSH_USER }}
  key: ${{ secrets.SSH_KEY }}
  port: ${{ secrets.SSH_PORT}}
  source: '.'
  target: ${{ secrets.PATH }}
</code></pre>
","7277941",""
"78443337","76259462","2024-05-07 14:46:46","1","<p>Recently, I found out that <a href=""https://github.com/actions/runner-images/issues/1519#issuecomment-683790054"" rel=""nofollow noreferrer"">ping doesn't work in GitHub actions</a> at all because the hosted runner uses a specific type of Azure machine that doesn't allow it by design :(</p>
","9124072",""
"76263041","76262960","2023-05-16 12:28:16","1","<p>It won't work like that you have to Go with <strong>placeholder</strong> option, add one <strong>step</strong> into your <strong>Github Action</strong></p>
<p><strong>Job.yaml</strong></p>
<pre><code>apiVersion: batch/v1
kind: Job
metadata:
  name: pi01
spec:
  template:
    spec:
      containers:
      - name: pi01
        image: xx:version
        command: [&quot;node&quot;, &quot;schedule/schedule.js&quot;]
        env:
          - name: DB_HOST
            value: VAL_DB_HOST
          - name: DB_PORT
            value: VAL_DB_PORT
</code></pre>
<p><strong>Run command</strong></p>
<pre><code>sed -i &quot;s,VAL_DB_HOST,$secrets.DB_HOST,&quot; job.yaml
sed -i &quot;s,VAL_DB_PORT,$secrets.DB_PORT,&quot; job.yaml
</code></pre>
<p>You can write <strong>shell script</strong> or further <strong>optimize</strong> it as per need. Above command will replace <strong>VAL_DB_HOST</strong> in <strong>Job.yaml</strong> with <strong>environment</strong> variable <strong>value</strong> saved.</p>
<p>Once your file <strong>job.yaml</strong> is ready, apply the changes</p>
<pre><code>kubectl apply -f job.yaml 
</code></pre>
<p>You can use the different method, <strong>Helm</strong>, <strong>Skafold</strong> also for <strong>templating</strong> if you are looking for that else above will be simple method.</p>
","5525824",""
"78481666","76262960","2024-05-15 04:50:55","0","<p>Instead of using <code>sed</code>, I used <code>yq</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>yq e '(select(.metadata.name==&quot;app-deployment&quot;) | .spec.template.spec.containers[] | select(.name==&quot;php&quot;) | .env) += [{&quot;name&quot;: &quot;DB_PASSWORD&quot;, &quot;value&quot;: &quot;${{ secrets.DB_PASSWORD }}&quot;}]' k8s/app.yaml -i
</code></pre>
<p>The secret does still show if I view the YAML via kubectl or k9s, so I'm not sure this is optimal, but if someone makes it in that far they probably also have access to my ENV.</p>
","65387",""
"76305939","76303782","2023-05-22 11:57:47","0","<p>Using repository_dispatch it works.</p>
<pre><code>name: Suburb Automatic
on: 
  workflow_dispatch:
  repository_dispatch:
    types: [auto-suburb]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Start new workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: auto-suburb

</code></pre>
","9389353",""
"76331050","76324589","2023-05-25 10:00:03","0","<p>Finally figured this out, turns out that if you specify an environment for your jobs, then the subject claim in the jwt/oidc token changes from:</p>
<blockquote>
<p>repo:organization-name/repo-name:ref:refs/heads/main</p>
</blockquote>
<p>to...</p>
<blockquote>
<p>repo:organization-name/repo-name:environment:env_name</p>
</blockquote>
<p>So I updated the bound_claims in the github-actions module config in vault to include both the repo and the environment (could also use a wildcard if you wanted) and now the auth works.</p>
","1904792",""
"76431708","76431545","2023-06-08 12:07:48","0","<p>This sounds like a typical network problem. Discuss the issue with the appropriate department running the enterprise Github and find out which policies you have to match and rules you have to follow to become able to send emails from within Github Actions workflow workloads on those systems. They should be able to tell you.</p>
<hr />
<p>The action <strong>dawidd6/action-send-mail</strong> is well accepted for sending emails in Github Actions and I do not see a reason why it should - by the action itself - not work on Github Enterprise.</p>
<p>When you browse the development documentation online, you can also learn about users running that action on internal infrastructure that have contributed changes to it (#59/60).</p>
<hr />
<p>And if you'd like to dabble yourself a bit trouble-shooting from within the workflow, there is <a href=""https://github.com/jetmore/swaks"" rel=""nofollow noreferrer"">swaks</a> and <a href=""https://tunshell.com/"" rel=""nofollow noreferrer"">tunshell</a> might be of use. Perhaps you're able to find the correct SMTP configuration this way. But just asking the admin for the correct settings is likely easier, especially if network traffic is actually blocked.</p>
","367456",""
"76516794","76512235","2023-06-20 16:40:55","0","<p>I could solve it:
I had to adapt my Dockerfile and write &quot;COPY dbt .&quot;, because this is the subfolder where the actual dbt code is located</p>
","4904027",""
"76573716","76570482","2023-06-28 13:35:11","0","<p>The boilerplate code <a href=""https://create.t3.gg"" rel=""nofollow noreferrer"">create-t3-app</a> I used, ignored <code>next-env.d.ts</code> type declaration file from git which included a lot of types including image types.</p>
<p>This is why <code>tsc --noEmit</code> is working locally but not on GitHub CLI.</p>
<p>I just added this file to the repo and the build is succeeding ✅</p>
","9698583",""
"77498800","76746551","2023-11-17 00:51:06","2","<p>Using the <code>pull_request_target</code> event instead of <code>pull_request</code> in your GitHub Actions workflow is a suitable approach for this scenario.</p>
<p>It allows workflows to access repository secrets when triggered by pull requests from forks, addressing the limitation you've encountered. However, it's crucial to handle this feature with care due to its security implications.</p>
","5127522",""
"77158837","77158031","2023-09-22 15:11:26","0","<p>As an alternative, please consider using the <a href=""https://github.com/dorny/paths-filter"" rel=""nofollow noreferrer"">dorny/paths-filter</a> GitHub Action that is able to &quot;Consider if file was added, modified or deleted&quot; (See the advanced option <a href=""https://github.com/dorny/paths-filter#advanced-options"" rel=""nofollow noreferrer"">here</a>) like:</p>
<pre><code>- uses: dorny/paths-filter@v2
      id: filter
      with:
        # Changed file can be 'added', 'modified', or 'deleted'.
        # By default, the type of change is not considered.
        # Optionally, it's possible to specify it using nested
        # dictionary, where the type of change composes the key.
        # Multiple change types can be specified using `|` as the delimiter.
        filters: |
          shared: &amp;shared
            - common/**
            - config/**
          addedOrModified:
            - added|modified: '**'
          allChanges:
            - added|deleted|modified: '**'
          addedOrModifiedAnchors:
            - added|modified: *shared
</code></pre>
<p>This approach will require an extra job that will prevent the execution in case.</p>
","2270041",""
"77395417","77395114","2023-10-31 11:17:29","3","<p>You have a <code>gh-action-test</code> <strong>directory</strong> in which there is a <code>gh-action-test</code> file, that's what the <code>d</code> in <code>dr-xr-xr-x</code> stands for. The <code>ls -l .</code> command shows the <code>gh-action-test</code> directory which is inside the current directory. The <code>ls -l gh-action-test</code> command shows the <code>gh-action-test/gh-action-test</code> file.</p>
<p>If you do <code>ls -ld gh-action-test</code>, you should see the same permissions as in <code>ls -l .</code></p>
","5397009",""